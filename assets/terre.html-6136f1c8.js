import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as p,a,e,b as s,d as t}from"./app-bf8eadbc.js";const i={},d=t('<h1 id="webgal-terre-贡献指南" tabindex="-1"><a class="header-anchor" href="#webgal-terre-贡献指南" aria-hidden="true">#</a> WebGAL Terre 贡献指南</h1><p>欢迎参与 WebGAL Terre 的贡献！WebGAL Terre 是我们最具创造力和竞争力的项目。我们致力于帮助不适应编程的创作者使用 WebGAL 创作出自己的作品。从游戏脚本到自定义 UI，几乎任何和创作有关的任务，我们都致力于提供一种图形编辑的方式来降低门槛，让创作成为一件更加轻松的事。</p><p>除此以外，我们也为几乎所有功能提供了使用代码编写的方式。我们将代码编辑和图形化编辑模块设计为完全兼容的，创作者可以在两种模式间无缝切换。</p><p>在参与这个激动人心的项目前，我们希望你可以阅读以下规范：</p><h2 id="参与贡献的要求" tabindex="-1"><a class="header-anchor" href="#参与贡献的要求" aria-hidden="true">#</a> 参与贡献的要求</h2><p>为了帮助我们更好地理解和审核您的贡献，请您注意以下几点：</p><p><em>代码注释</em>： 为了方便我们理解您的代码思路，建议您在关键部分添加注释说明。</p><p><em>功能测试</em>： 如果您添加或修改了功能，请提供相应的测试方法，以确保功能正常运行。如果您进行了代码重构，也请提供测试方法来覆盖受影响的范围，确保重构没有引入新的问题。</p><p><em>清晰的说明</em>： 在提交 Pull Request 时，请简要说明您所做的改动以及背后的原因，这将有助于我们更快地理解您的贡献。</p><h2 id="项目介绍" tabindex="-1"><a class="header-anchor" href="#项目介绍" aria-hidden="true">#</a> 项目介绍</h2><p>WebGAL Terre 使用 TypeScript 全栈开发，并使用 yarn 作为包管理器，yarn workspace 作为 monorepo 管理器。</p><h2 id="启动项目" tabindex="-1"><a class="header-anchor" href="#启动项目" aria-hidden="true">#</a> 启动项目</h2><h3 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h3>',13),l={href:"https://yarnpkg.com/",target:"_blank",rel:"noopener noreferrer"},u=a("h3",{id:"克隆仓库",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#克隆仓库","aria-hidden":"true"},"#"),e(" 克隆仓库")],-1),m={href:"https://github.com/OpenWebGAL/WebGAL_Terre",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="安装依赖-1" tabindex="-1"><a class="header-anchor" href="#安装依赖-1" aria-hidden="true">#</a> 安装依赖</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="启动开发服务器" tabindex="-1"><a class="header-anchor" href="#启动开发服务器" aria-hidden="true">#</a> 启动开发服务器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将启动开发服务器，并在默认浏览器中打开应用程序。</p><h3 id="构建项目" tabindex="-1"><a class="header-anchor" href="#构建项目" aria-hidden="true">#</a> 构建项目</h3><p>您需要运行构建脚本以生成可发布的版本。</p><ul><li><strong>Windows:</strong> <code>release.sh</code></li><li><strong>其他环境:</strong> 请查看项目根目录下对应的构建脚本。</li></ul><p>构建完成后，您可以在 <code>release</code> 目录下找到构建产物。</p><h2 id="更新-terre-附带的-webgal-引擎模板" tabindex="-1"><a class="header-anchor" href="#更新-terre-附带的-webgal-引擎模板" aria-hidden="true">#</a> 更新 Terre 附带的 WebGAL 引擎模板</h2><p>一般来说，我们会在 WebGAL 更新后将最新版本的引擎模板更新到 Terre 项目中。假如你想在 Terre 中使用你定制的 WebGAL 引擎，请遵循以下步骤：</p><p>1、Clone WebGAL 引擎项目（推荐在相邻目录 Clone，这样可以使用自动化脚本）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone https://github.com/OpenWebGAL/WebGAL.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、<strong>（假设你在 Terre 项目的相邻目录 Clone WebGAL 项目，未这样做的开发者请忽略）</strong> 在 WebGAL 引擎仓库运行自动化脚本构建 WebGAL 到 WebGAL Terre</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sh release-to-terre.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>以下步骤适用于手动构建并更新 Terre 中的引擎模板的情况。使用自动化脚本的开发者请忽略！</strong></p></div><p>2、构建 WebGAL 项目（此步骤在 WebGAL 引擎仓库中执行）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn
yarn build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、删除 WebGAL Terre 里的引擎模板，并移动引擎项目的构建产物到 WebGAL Terre 的模板目录</p><p><strong>此处假设你在 Terre 项目的相邻目录 Clone WebGAL 项目，如果你有不同的目录结构，请根据实际情况修改。</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 进入 Terre 目录
cd ../WebGAL_Terre/packages/terre2/assets/templates/WebGAL_Template || exit
# 删除其他文件
rm -r assets
rm -r index.html
rm -r webgal-serviceworker.js

# 进入 WebGAL 构建目录
cd ../../../../../../WebGAL/packages/webgal || exit
# 复制
cp -r dist/index.html ../../../WebGAL_Terre/packages/terre2/assets/templates/WebGAL_Template
cp -r dist/assets ../../../WebGAL_Terre/packages/terre2/assets/templates/WebGAL_Template
cp -r dist/webgal-serviceworker.js ../../../WebGAL_Terre/packages/terre2/assets/templates/WebGAL_Template
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="包介绍" tabindex="-1"><a class="header-anchor" href="#包介绍" aria-hidden="true">#</a> 包介绍</h2><table><thead><tr><th>包名</th><th>说明</th></tr></thead><tbody><tr><td><code>packages/dev-server</code></td><td>在 80 端口调试，方便服务器用户</td></tr><tr><td><code>packages/origine2</code></td><td>编辑器前端</td></tr><tr><td><code>packages/terre-electron</code></td><td>Electron 版本的 Terre 编辑器</td></tr><tr><td><code>packages/terre2</code></td><td>编辑器后端</td></tr><tr><td><code>packages/vscode-ws-jsonrpc-webgal</code></td><td>用于 WebGAL 编辑器后端的定制包，修复了一些 bug</td></tr><tr><td><code>packages/WebGAL-electron</code></td><td>WebGAL 的 Electron 封装</td></tr></tbody></table><h2 id="webgal-terre-前后端联调指南" tabindex="-1"><a class="header-anchor" href="#webgal-terre-前后端联调指南" aria-hidden="true">#</a> WebGAL Terre 前后端联调指南</h2><p>WebGAL Terre 是一个 TypeScript 全栈项目，使用 OpenAPI 来生成请求后端接口的代码。</p><p>要使得这个流程可以正常运作，在为 WebGAL Terre 后端开发接口时，注意以下注解：</p><p><strong>1. 接口注解介绍</strong></p><p>以下代码示例展示了后端接口需要使用的关键注解：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">&#39;createGame&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiOperation</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> summary<span class="token operator">:</span> <span class="token string">&#39;Create a new game&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiResponse</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&#39;Game creation result.&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiBody</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> CreateGameDto<span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&#39;Game creation data&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">createGame</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> createGameData<span class="token operator">:</span> CreateGameDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> createResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>manageGame<span class="token punctuation">.</span><span class="token function">createGame</span><span class="token punctuation">(</span>
      createGameData<span class="token punctuation">.</span>gameName<span class="token punctuation">,</span>
      createGameData<span class="token punctuation">.</span>derivative<span class="token punctuation">,</span>
      createGameData<span class="token punctuation">.</span>templateName<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>createResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token string">&#39;success&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token string">&#39;failed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 代码示例详解</strong></p><p>让我们逐行分析这段代码，理解每个注解的作用：</p><ul><li><p><strong><code>@Post(&#39;createGame&#39;)</code></strong>:</p><ul><li><code>@Post</code>: 表明这是一个 POST 请求的接口。</li><li><code>&#39;createGame&#39;</code>: 定义了接口的路径，即 <code>/createGame</code>。</li></ul></li><li><p><strong><code>@ApiOperation({ summary: &#39;Create a new game&#39; })</code></strong>:</p><ul><li><code>@ApiOperation</code>: 用于描述接口的功能。</li><li><code>summary</code>: 简要概括接口的作用，会在生成的 OpenAPI 文档中显示。</li></ul></li><li><p><strong><code>@ApiResponse({ status: 200, description: &#39;Game creation result.&#39; })</code></strong>:</p><ul><li><code>@ApiResponse</code>: 描述接口可能的响应。</li><li><code>status</code>: 指定 HTTP 状态码，这里是 200，表示成功。</li><li><code>description</code>: 描述该状态码下的响应内容。</li></ul></li><li><p><strong><code>@ApiBody({ type: CreateGameDto, description: &#39;Game creation data&#39; })</code></strong>:</p><ul><li><code>@ApiBody</code>: 指定请求体的数据类型和描述。</li><li><code>type</code>: 指明请求体的数据结构，这里使用了 <code>CreateGameDto</code>，这是一个预先定义的 DTO（Data Transfer Object）。</li><li><code>description</code>: 描述请求体数据的含义。</li></ul></li><li><p><strong><code>async createGame(@Body() createGameData: CreateGameDto)</code></strong>:</p><ul><li><code>async</code>: 表明这是一个异步函数。</li><li><code>createGame</code>: 接口的函数名。</li><li><code>@Body()</code>: 从请求体中获取数据。</li><li><code>createGameData: CreateGameDto</code>: 将请求体数据解析为 <code>CreateGameDto</code> 类型的对象。</li></ul></li></ul><p><strong>3. 前端项目更新 OpenAPI</strong></p><p>为了让前端项目能够使用最新的后端接口，你需要在开发过程中定期更新 OpenAPI 定义。</p><p><strong>步骤如下：</strong></p><ol><li>确保后端项目正在运行 (前面提到的，执行：<code>yarn dev</code>)。</li><li>在 <code>packages/origine2</code> 目录下，执行命令： <code>yarn openapi</code>。</li></ol><p>这个命令会根据后端代码中的注解自动生成最新的 OpenAPI 定义文件。前端项目会使用这个文件来生成请求接口的代码，从而保证前后端接口的一致性。</p><p><strong>4. 前端项目使用接口</strong></p><p>在 WebGAL 前端项目中，你可以通过以下方式调用后端接口：</p><ol><li>导入 <code>api</code> 对象: <code>import {api} from &quot;@/api&quot;;</code></li><li>调用 <code>api</code> 对象上的方法，例如：<code>api.manageGameControllerGetGameList()</code>。</li></ol><p><code>api</code> 对象包含了所有后端接口的对应方法，你可以根据接口名称直接调用。</p><h2 id="更多有关开发的信息" tabindex="-1"><a class="header-anchor" href="#更多有关开发的信息" aria-hidden="true">#</a> 更多有关开发的信息</h2><p>除此以外，在源代码的一些关键目录，我们也会提供一些说明文档来解释这个模块的原理。这些信息将以中文提供。如今，大语言模型在翻译上的表现已经足够好，所以如果你无法阅读中文，也不必担心。你可以尝试使用大语言模型将其翻译为你的语言。</p>`,43);function h(k,v){const n=o("ExternalLinkIcon");return c(),p("div",null,[d,a("p",null,[e("首先，请确保您已经安装了 "),a("a",l,[e("Yarn"),s(n)]),e("。如果您没有安装 Yarn，请根据官方文档进行安装。")]),u,a("p",null,[e("WebGAL Terre 的仓库在 "),a("a",m,[e("WebGAL Terre - GitHub"),s(n)])]),b])}const A=r(i,[["render",h],["__file","terre.html.vue"]]);export{A as default};
