import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,d as n}from"./app-7639c4a5.js";const l={},o=n(`<h1 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h1><div class="hint-container warning"><p class="hint-container-title">Note</p><p>Don&#39;t use the variable system until you figure out how to use scene jumping and branch jumping, it will be confusing!</p></div><h2 id="using-variables" tabindex="-1"><a class="header-anchor" href="#using-variables" aria-hidden="true">#</a> Using Variables</h2><p>To set a variable:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">a=1</span><span style="color:#6272A4;">; // You can set a number</span></span>
<span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">a=true // You can set a boolean</span></span>
<span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">a=Character Name // You can set a string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To set a random number, use <code>random()</code></p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">a=random()</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>random([lower=0], [upper=1], [floating])</code> Random number is a <strong>built-in function</strong> that supports multiple parameters:</p><p><strong>Parameter</strong> :</p><ol><li>[lower=0] (number): indicates the lower limit.</li><li>[upper=1] (number): indicates the upper limit.</li><li>[floating] (boolean): Specifies whether to return a floating-point number.</li></ol><p>Instead of writing arguments, it generates a floating-point number in the range 0-1</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">a=random()</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Of course, we can also specify <strong>Range</strong>. For example, if you want a random number between 5 and 10, You can write:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#FFB86C;">SetVar</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;"> a = the random (5, 10)</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Of course you want it to use ranges to generate values that also have decimals, then specify a third argument:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#FFB86C;">SetVar</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;"> a = the random (5, 10, true)</span><span style="color:#6272A4;">; # will generate a floating point number between 5 and 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also use previously defined variables when setting variables.</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">a=1</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">b=a+1</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditional-execution" tabindex="-1"><a class="header-anchor" href="#conditional-execution" aria-hidden="true">#</a> Conditional Execution</h2><p>You can add a <code>-when=(condition)</code> parameter after a statement to conditionally execute the current statement.</p><p>For example:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">a=1</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#6272A4;">; // Jump to scene 1 when a is greater than 1</span></span>
<span class="line"><span style="color:#8BE9FD;">changeScene</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">1.txt </span><span style="color:#FF5555;">-</span><span style="color:#FFB86C;">when</span><span style="color:#FF5555;">=</span><span style="color:#50FA7B;">a&gt;1</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#6272A4;">; // Jump only when a is 1, note that the equality operator is ==</span></span>
<span class="line"><span style="color:#8BE9FD;">changeScene</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">2.txt </span><span style="color:#FF5555;">-</span><span style="color:#FFB86C;">when</span><span style="color:#FF5555;">=</span><span style="color:#50FA7B;">a==1</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#6272A4;">; // If a is less than 1, the above statements won&#39;t execute, so this one will</span></span>
<span class="line"><span style="color:#8BE9FD;">changeScene</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">3.txt</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>=</code> is the assignment operator, it cannot be used in conditional statements, <code>==</code> is the equality operator.</p></div><p>Any statement can be conditionally executed with the <code>-when</code> parameter. By combining the <code>-when</code> parameter with <code>jumpLabel</code> <code>callScene</code> <code>changeScene</code>, you can achieve conditional flow control.</p><h2 id="getting-user-input" tabindex="-1"><a class="header-anchor" href="#getting-user-input" aria-hidden="true">#</a> Getting User Input</h2><p>Use the <code>getUserInput</code> statement to get user input, for example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">getUserInput:name -title=What&#39;s your name? -buttonText=OK; Store the user input in the variable name</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Where <code>title</code> is the prompt text, <code>buttonText</code> is the text on the OK button</p><h2 id="variable-interpolation" tabindex="-1"><a class="header-anchor" href="#variable-interpolation" aria-hidden="true">#</a> Variable Interpolation</h2><p>You can use the <code>{}</code> syntax in statements to interpolate variables, passing a variable into the statement, for example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">setVar:name=WebGAL;</span></span>
<span class="line"><span style="color:#F8F8F2;">setVar:engine=WebGAL;</span></span>
<span class="line"><span style="color:#F8F8F2;">{name}:Welcome to {engine}! This is a brand new visual novel engine for web.;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="persistent-variables-global-variables" tabindex="-1"><a class="header-anchor" href="#persistent-variables-global-variables" aria-hidden="true">#</a> Persistent Variables (Global Variables)</h2><p>Normal variables in WebGAL are存档 dependent, that is, any variable only exists in the current game scene, and only存档 can save it and read it back.</p><p>In order to solve the problem that the author may want to set multiple weeks, a persistent (global) variable is provided. Once set, it will take effect in the entire game, unless the user clears all data.</p><p>Adding the <code>-global</code> parameter can set persistent (global) variables</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">a=1 </span><span style="color:#FF5555;">-</span><span style="color:#FFB86C;">global</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This sets a variable that does not change with存档 reading.</p><p>Example of use:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">jumpLabel</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">turn-2 </span><span style="color:#FF5555;">-</span><span style="color:#FFB86C;">when</span><span style="color:#FF5555;">=</span><span style="color:#50FA7B;">a&gt;0</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">a=1 </span><span style="color:#FF5555;">-</span><span style="color:#FFB86C;">global</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#F1FA8C;">First playthrough</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#8BE9FD;">changeScene</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">First playthrough plot.txt</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#8BE9FD;">label</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">turn-2</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#F1FA8C;">Second playthrough</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#8BE9FD;">changeScene</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">Second playthrough plot.txt</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="advanced-usage-4-5-4" tabindex="-1"><a class="header-anchor" href="#advanced-usage-4-5-4" aria-hidden="true">#</a> Advanced Usage（<code>&gt;=4.5.4</code>）</h2><p>Use built-in variables to perform more advanced operations, such as making changes to configuration variables, executing logic based on specified conditions, and so on.</p><p>WebGAL currently has two built-in variable domains: <code>stage</code> and <code>userData</code>.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>stage</code> is a <strong>runtime built-in variable</strong> and <code>userData</code> is an <strong>archive built-in variable</strong>.</p><p>The properties for <code>stage</code> can be found in the <code>state</code> TAB under the WebGAL editor, and <code>userData</code> can be found in <code>indexedDB</code> in the DevTools.</p></div><p>You can access them using <code>$</code>, for example to get the value of BGM:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">a=($stage.bgm.volume)</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#FFB86C;">WebGAL</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">The current BGM volume is{a}</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, you can also use it directly in a conversation:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#FFB86C;">WebGAL</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">The current BGM volume is{$stage.bgm.volume}</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p><code>Parentheses</code> are needed to get a <strong>single-valued variable</strong>, but not to do math.</p></div><p>We can also access the global variables in <code>config.txt</code> :</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">title=(Game_name)</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#FFB86C;">WebGAL</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">The current title of the game is{title}</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The same goes for modifications. When changing the game title to a new one, the variable name in setVar needs to be set to the name of the variable we are modifying.</p><p>Adding the <code>global</code> flag indicates that we are modifying a configuration variable:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">Game_name=(&#39;New Game Title&#39;) </span><span style="color:#FF5555;">-</span><span style="color:#FFB86C;">global</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#FFB86C;">WebGAL</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">The current title of the game is{Game_name}</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p>If <code>global</code> is not added, it will be assigned to the in-game variable. Please be aware of when to use the <code>global</code> parameter.</p></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The original configuration variables <code>Title_img</code>、<code>Title_bgm</code>、<code>Game_name</code>、<code>Game_key</code>.<br> To do this, use <code>Clear all data</code> in the game options.</p></div><p>Of course, you can also create a custom configuration variable in <code>config.txt</code>, such as a version number:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">Game_name:欢迎使用WebGAL！;</span></span>
<span class="line"><span style="color:#F8F8F2;">Game_key:f60ad5725c1588;</span></span>
<span class="line"><span style="color:#F8F8F2;">Title_img:WebGAL_New_Enter_Image.png;</span></span>
<span class="line"><span style="color:#F8F8F2;">Title_bgm:s_Title.mp3;</span></span>
<span class="line"><span style="color:#F8F8F2;">Textbox_theme:imss;</span></span>
<span class="line"><span style="color:#F8F8F2;">; Add version variable</span></span>
<span class="line"><span style="color:#F8F8F2;">version:1;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we can access it, modify it, and so on in a script:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">v=(version)</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#FFB86C;">WebGAL</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">The current version number is{v}</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#8BE9FD;">setVar</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">version=version*2 </span><span style="color:#FF5555;">-</span><span style="color:#FFB86C;">global</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#FFB86C;">WebGAL</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">The current modified version number is{version}</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p><code>config.txt</code> hasn&#39;t escaped any special symbols yet.</p></div>`,60),i=[o];function t(r,c){return a(),e("div",null,i)}const u=s(l,[["render",t],["__file","variable.html.vue"]]);export{u as default};
