import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as a,d as n}from"./app-1c6f6712.js";const i="/assets/text-enhance-efa2b8c4.png",o={},s=n(`<h1 id="dialogue" tabindex="-1"><a class="header-anchor" href="#dialogue" aria-hidden="true">#</a> Dialogue</h1><div class="hint-container warning"><p class="hint-container-title">Note</p><p>Colons and semicolons in each dialogue should be English characters!</p></div><p><strong>The way to write character dialogue is very simple, and it is almost the same as natural language.</strong></p><div class="hint-container info"><p class="hint-container-title">Info</p><p>When the font is medium and large, the text box displays 2 lines, and when the font is small, it displays 3 lines.</p></div><h2 id="basic-character-dialogue" tabindex="-1"><a class="header-anchor" href="#basic-character-dialogue" aria-hidden="true">#</a> Basic Character Dialogue</h2><p>First, open <code>start.txt</code> in the <code>scene</code> folder of the game resource directory using Notepad or a text editor such as VS Code or sublime, and then you can start writing your first dialogue.</p><p>The way to write character dialogue is very simple, you just need to enter <code>Character: dialogue;</code></p><p>Example:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>Yukino Yukinoshita: Please have some tea;
Yui Yuigahama: Ah, thank you;
Komachi: Thank you, Sister Yukino!;
Iroha Isshiki: Thank you, senior. ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After each dialogue/script, use a semicolon as the end. (Sometimes it works if you don&#39;t write a semicolon, but the author still recommends adding a semicolon to prevent bugs).</p><h2 id="continuous-dialogue" tabindex="-1"><a class="header-anchor" href="#continuous-dialogue" aria-hidden="true">#</a> Continuous Dialogue</h2><p>If your multiple dialogues do not change the character name, you can use continuous dialogue, and you can omit the character name, and use it when you need it:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>Yukino Yukinoshita: You&#39;re here early;
; // At this time, the character name of the dialogue is still &quot;Yukino Yukinoshita&quot;
Sorry, have you been waiting long?;
Hachiman Hikigaya: Just arrived;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="narration" tabindex="-1"><a class="header-anchor" href="#narration" aria-hidden="true">#</a> Narration</h2><p>If you want to create a monologue dialogue without a character name, leave a blank space before the colon (but do not omit the colon):</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>:This is a monologue;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="blackout-text" tabindex="-1"><a class="header-anchor" href="#blackout-text" aria-hidden="true">#</a> Blackout Text</h2><p>In many games, some text is displayed on a black screen, which is used to introduce the theme or express the character&#39;s mental activities. You can use the intro command to perform a monologue:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>intro: Memories don&#39;t need a suitable script, | Anyway, once you say it, | It all becomes a joke. ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The monologue is split by the separator (|), that is, each | represents a line break. In the actual performance, the above text will become:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>Memories don&#39;t need a suitable script,
Anyway, once you say it,
It all becomes a joke.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to keep the monologue UI after the monologue ends instead of continuing the game flow, use the <code> -hold</code> parameter.</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>intro:Recalling doesn&#39;t need a suitable script,|anyway, once it&#39;s spoken,|it all becomes a joke. -hold;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="get-user-input" tabindex="-1"><a class="header-anchor" href="#get-user-input" aria-hidden="true">#</a> Get User Input</h2><p>Use the <code>getUserInput</code> instruction to get user input and write it into a variable, for example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>getUserInput:name -title=What is your name -buttonText=OK; Write user input to variable name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Among them, the <code>title</code> parameter is the text of the prompt, and <code>buttonText</code> is the text of the confirmation button</p><h2 id="variable-interpolation" tabindex="-1"><a class="header-anchor" href="#variable-interpolation" aria-hidden="true">#</a> Variable Interpolation</h2><p>You can use the <code>{}</code> syntax in a statement to perform variable interpolation and pass a variable into the statement, for example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WebGAL: Nice to meet you, {name}!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Variable interpolation also applies to character names, for example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{name}: I like WebGAL the most too!;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ruby" tabindex="-1"><a class="header-anchor" href="#ruby" aria-hidden="true">#</a> Ruby</h2><p>Adding ruby to dialogue text is a very common performance effect in Japanese games. Because there are often some words in Japanese that are inconsistent in writing and pronunciation.</p><p>The grammar of Ruby is <code>[Word to be annotated](annotation)</code></p><p>Example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>『[笑顔](えがお)』なんて、『[笑う](わらう)』なんて、[誰](だれ)でも[出来](でき)るもん…！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="text-enhancement-syntax" tabindex="-1"><a class="header-anchor" href="#text-enhancement-syntax" aria-hidden="true">#</a> Text Enhancement Syntax</h2><p>In WebGAL 4.5.3, the &quot;text enhancement syntax&quot; feature has been added. This syntax allows you to add text styles to specific text.</p><p>Text enhancement syntax is an enhancement to a specific piece of text. Text enclosed in [] and followed by () as a text enhancement description is text that conforms to the text enhancement syntax definition.</p><p>In simple terms, it takes the following form:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WebGAL:[Text](style-alltext=font-style:italic\\;font-size:80%\\; style=color:#66327C\\; ruby=wen ben)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This means that the font size of this text is smaller, italicized, the color is #66327C, and it has ruby annotation.</p><p>For different parameters in the text enhancement syntax, use spaces to separate them, and the form is always <code>argk=argv</code>.</p><p>It is important to note that because ; is the comment syntax of WebGAL, you need to add \\ to escape it in the text enhancement syntax, which becomes ;.</p><h3 id="scope-of-style-effects-for-different-parameters" tabindex="-1"><a class="header-anchor" href="#scope-of-style-effects-for-different-parameters" aria-hidden="true">#</a> Scope of Style Effects for Different Parameters</h3><figure><img src="`+i+`" alt="text-enhance" tabindex="0" loading="lazy"><figcaption>text-enhance</figcaption></figure><p>In the previous example syntax, notice that there are two different parameters that can define styles for text: <code>style</code> and <code>style-alltext</code>.</p><p>The reason for distinguishing the scope of text styles is that in order to provide a better stroke effect for text, WebGAL divides a character into three layers: text, stroke, and placeholder.</p><p>Text is the topmost part and the main part. The stroke is below the text and is covered by the text to provide a white stroke without destroying the internal shape of the text. The bottom layer is a transparent placeholder that provides positioning.</p><p>In short, if you only need to change the text color, you only need to use the <code>style</code> parameter. If you want to apply effects such as italics, text size, internal and external margins, you need to set the effects for <code>style-alltext</code> at the same time.</p><p><strong>Special note: Due to a bug in version 4.5.3, it is currently not possible to apply only the style-alltext parameter, because the text enhancement syntax is only activated when the syntax <code>style=</code> is detected.</strong></p><h3 id="compatibility-with-phonetic-annotations" tabindex="-1"><a class="header-anchor" href="#compatibility-with-phonetic-annotations" aria-hidden="true">#</a> Compatibility with Phonetic Annotations</h3><p>For compatibility with the previous syntax, if the syntax <code>style=</code> is not recognized, then we will treat the <code>()[]</code> syntax as a phonetic annotation.</p><p>If the new text enhancement syntax is used, the phonetic annotation is written in the <code>ruby=</code> parameter, as illustrated in the example above.</p><h2 id="close-the-text-box" tabindex="-1"><a class="header-anchor" href="#close-the-text-box" aria-hidden="true">#</a> Close the Text Box</h2><p>Sometimes, for some special performance effects, you may want to temporarily close the text box, so you can use the following instructions to close the text box:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setTextbox:hide; // Close the text box
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>When the value of the <code>setTextbox</code> instruction is <code>hide</code>, the text box will be closed and the user will not be able to open it in any way. If you want to display the text box again, call this command again and enter any value other than <code>hide</code>.</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setTextbox:on; // Can be any value other than hide.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="end-the-game-and-return-to-title" tabindex="-1"><a class="header-anchor" href="#end-the-game-and-return-to-title" aria-hidden="true">#</a> End the Game and Return to Title</h2><p>If you want to end the game and return to the title after the plot, please use:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>end;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>In this way, the game can return to the title interface.</p><h2 id="cinematic-mode-test-feature" tabindex="-1"><a class="header-anchor" href="#cinematic-mode-test-feature" aria-hidden="true">#</a> Cinematic Mode (Test Feature)</h2><p>Use <code>filmMode:enable;</code> to enable cinematic mode.<br> Use <code>filmMode:none;</code> to disable cinematic mode.</p>`,66),r=[s];function d(l,c){return t(),a("div",null,r)}const m=e(o,[["render",d],["__file","dialogue.html.vue"]]);export{m as default};
