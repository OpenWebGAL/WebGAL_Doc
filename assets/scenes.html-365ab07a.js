import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as d,d as n}from"./app-962cd971.js";const i={},l=n(`<h1 id="シーンと分岐" tabindex="-1"><a class="header-anchor" href="#シーンと分岐" aria-hidden="true">#</a> シーンと分岐</h1><p>ビジュアルノベルでは、章、シーン、分岐の選択は欠かせないため、WebGALでもシーンのジャンプと分岐の選択がサポートされています。</p><p>スクリプトを複数のtxtドキュメントに分割し、簡単なステートメントを使用して現在実行中のスクリプトを切り替えることができます。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>シーンのジャンプ、分岐の選択、またはシーンの呼び出しの後、ステージはクリアされません。これは、前のシーンで適用された背景音楽、立ち絵、背景画像などの効果が次のシーンに継承されることを意味します。</p><p>WebGAL Terreビジュアルエディタを使用している場合は、エディタは単一のシーンをプレビューするときに前のシーンがどのような効果をもたらすかを考慮しないため、特に注意する必要があります。そのため、プレビュー効果と実際のゲームの実行効果が異なる場合があります。シーンのジャンプ前のステージのクリーンアップ作業を適切に処理することを検討する必要があります。</p></div><h2 id="シーンのジャンプ" tabindex="-1"><a class="header-anchor" href="#シーンのジャンプ" aria-hidden="true">#</a> シーンのジャンプ</h2><p>現在、2つの章のスクリプト、つまり<code>Chapter-1.txt</code>と<code>Chapter-2.txt</code>を作成したとします。<code>Chapter-1.txt</code>の実行が終了したら、<code>Chapter-2.txt</code>に対応するシーンにジャンプするには、次のステートメントを使用します。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>changeScene:Chapter-2.txt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>(Chapter-1.txt)
......
......
; // ここからChapter-2.txtの内容を実行します
changeScene:Chapter-2.txt;
......
......
(Chapter-2.txt)
......
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>このコマンドを実行すると、ゲームシーンが切り替わり、その後のプロットの展開が新しいシーンのスクリプトに従って実行されます。新しいスクリプトは、次のマウスクリック後に実行されます。</p><h2 id="シーンの呼び出し" tabindex="-1"><a class="header-anchor" href="#シーンの呼び出し" aria-hidden="true">#</a> シーンの呼び出し</h2><p>シーン内で別のシーンを呼び出す必要がある場合は、<code>callScene</code>を使用できます。呼び出されたシーンの実行が完了すると、元のシーンに戻ります。</p><p>ステートメント：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>callScene:Chapter-2.txt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>(Chapter-1.txt)
......
......
callScene:Chapter-2.txt;
; // ここからChapter-2.txtの内容を実行します
......
......
(Chapter-2.txt)
......
......
(Chapter-2.txtの実行が完了)
; // 親シーンに戻り、親シーンのステートメントの実行を続行します
......
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分岐の選択" tabindex="-1"><a class="header-anchor" href="#分岐の選択" aria-hidden="true">#</a> 分岐の選択</h2><p>スクリプトに分岐オプションがあり、異なるオプションを選択して異なる章に移動したい場合は、<code>choose</code>を使用します。</p><p><code>選択肢のテキスト:章ファイル名</code>を使用して選択肢を定義します。異なる選択肢を区切るには<code>|</code>を使用します。例を以下に示します。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>choose:彼女を呼び止める:Chapter-2.txt|家に帰る:Chapter-3.txt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>選択肢のテキストと、選択肢を選択した後に移動するスクリプト名を1対1で対応付けるだけで、分岐選択機能を実装できます。</p><h3 id="条件付き表示と選択" tabindex="-1"><a class="header-anchor" href="#条件付き表示と選択" aria-hidden="true">#</a> 条件付き表示と選択</h3><p>変数に応じて、オプションを条件付きで表示したり、ユーザーがオプションをクリックできるようにしたりすることもできます。構文は次のとおりです。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>choose:(showConditionVar&gt;1)[enableConditionVar&gt;2]-&gt;彼女に声を掛ける:Chapter-2.txt|家に帰る:Chapter-3.txt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ここでは、showConditionVar&gt;1 の場合にのみ最初のオプションが表示され、enableConditionVar&gt;2 の場合にのみユーザーがクリックできます。</p><h2 id="ラベルジャンプ" tabindex="-1"><a class="header-anchor" href="#ラベルジャンプ" aria-hidden="true">#</a> ラベルジャンプ</h2><p>分岐を作成したいが、そのために新しいTXTファイルを作成するのは面倒だと感じる場合は、同じファイル内で分岐とジャンプステートメントを作成する方法を試すことができます。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>分岐が長い場合は、この方法を使用しないことをお勧めします。TXTの行数は長すぎないようにしてください。そうしないと、読み込みが遅くなったり、応答が遅くなったりするなどのパフォーマンスの問題が発生する可能性があります。</p></div><h3 id="ラベル-label-の作成" tabindex="-1"><a class="header-anchor" href="#ラベル-label-の作成" aria-hidden="true">#</a> ラベル（<code>label</code>）の作成</h3><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>......
jumpLabel:label_1; // label_1にジャンプします
......
......
label:label_1; // label_1という名前のラベルを作成します
......
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>簡単に言うと、<code>jumpLabel</code>は<code>goto</code>ステートメントに似ており、スクリプトをシーン（TXTファイル）内の任意の位置にすぐにジャンプさせることができます。この位置は<code>label</code>を使用して作成する必要があります。</p><p><code>jumpLabel</code>をどこでもドアと例えると、このどこでもドアの終点は<code>label</code>のある場所です。</p><h3 id="選択肢の追加" tabindex="-1"><a class="header-anchor" href="#選択肢の追加" aria-hidden="true">#</a> 選択肢の追加</h3><p>上記の基本事項がわかれば、<code>choose</code>を使用して分岐を使用して<code>label</code>のある場所にジャンプできます。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>......
choose:分岐1:label_1|分岐2:label_2;
label:label_1; // label_1という名前のラベルを作成します
......
......
jumpLabel:end; // endにジャンプします
label:label_2; // label_2という名前のラベルを作成します
......
......
jumpLabel:end; // endにジャンプします
label:end; // endという名前のラベルを作成します
......
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各分岐の最後に、希望する場所にジャンプするために<code>jumpLabel</code>を使用する必要があります。プログラムは線形に実行されるため、分岐の最後にジャンプしない場合、プログラムは次の行に実行を続行します。例えば、以下のような場合です。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>......
choose:分岐1:label_1|分岐2:label_2;
label:label_1; // label_1という名前のラベルを作成します
......
......
label:label_2; // label_2という名前のラベルを作成します
......
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>このスクリプトでは、<code>分岐2</code>を選択した場合、すべて問題ないように見えます。しかし、<code>分岐1</code>を選択すると、<code>分岐1</code>の実行後に<code>分岐2</code>が実行されることに驚かれるでしょう。これは、プログラムが順番に次の行を実行し続け、分岐の終了後にジャンプする場所を指定していないためです。</p>`,38),s=[l];function c(r,t){return a(),d("div",null,s)}const b=e(i,[["render",c],["__file","scenes.html.vue"]]);export{b as default};
