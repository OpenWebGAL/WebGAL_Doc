import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,d as e}from"./app-46aaefde.js";const t={},i=e(`<h1 id="特殊効果" tabindex="-1"><a class="header-anchor" href="#特殊効果" aria-hidden="true">#</a> 特殊効果</h1><p>現在、WebGAL の特殊効果システムは PixiJS によって実装されています。</p><h2 id="特殊効果の使用" tabindex="-1"><a class="header-anchor" href="#特殊効果の使用" aria-hidden="true">#</a> 特殊効果の使用</h2><h3 id="pixiの初期化" tabindex="-1"><a class="header-anchor" href="#pixiの初期化" aria-hidden="true">#</a> Pixiの初期化</h3><p><code>pixiInit</code> 初期化 Pixi。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>pixiInit; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>特殊効果を追加したい場合は、まずこのコマンドを実行して Pixi を初期化する必要があります。</p><p>追加した特殊効果をクリアしたい場合も、このコマンドを実行してください。</p></div><h3 id="特殊効果の追加" tabindex="-1"><a class="header-anchor" href="#特殊効果の追加" aria-hidden="true">#</a> 特殊効果の追加</h3><p><code>pixiPerform</code> 追加特殊効果</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>pixiPerform:rain; // 雨の特殊効果を追加する
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意: 特殊効果が追加した後、初期化されていない場合は継続して実行されます。</p><h3 id="事前に作成された特殊効果" tabindex="-1"><a class="header-anchor" href="#事前に作成された特殊効果" aria-hidden="true">#</a> 事前に作成された特殊効果</h3><table><thead><tr><th style="text-align:left;">Effect</th><th style="text-align:left;">Command</th></tr></thead><tbody><tr><td style="text-align:left;">雨</td><td style="text-align:left;">pixiPerform:rain;</td></tr><tr><td style="text-align:left;">雪</td><td style="text-align:left;">pixiPerform:snow;</td></tr><tr><td style="text-align:left;">樱花</td><td style="text-align:left;">pixiPerform:cherryBlossoms;</td></tr></tbody></table><h3 id="重ね合わせた特殊効果" tabindex="-1"><a class="header-anchor" href="#重ね合わせた特殊効果" aria-hidden="true">#</a> 重ね合わせた特殊効果</h3><p>2 つ以上の特殊効果を重ね合わせたい場合は、<code>pixiInit</code> コマンドを使用せずに異なる特殊効果を重ね合わせることができます。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>pixiPerform:rain;
pixiPerform:snow;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特殊効果のクリア" tabindex="-1"><a class="header-anchor" href="#特殊効果のクリア" aria-hidden="true">#</a> 特殊効果のクリア</h3><p><code>pixiInit</code> を使用して初期化すると、追加したすべての特殊効果をクリアすることができます。</p><h2 id="カスタム特殊効果の追加" tabindex="-1"><a class="header-anchor" href="#カスタム特殊効果の追加" aria-hidden="true">#</a> カスタム特殊効果の追加</h2><p>ソースコードをダウンロードし、<code>/Core/gameScripts/pixiPerformScripts</code> に移動し、カスタム特殊効果のために <code>PIXI.Container</code> を作成します。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 現在の Pixi.Container の特殊効果を取得する</span>
<span class="token keyword">const</span> effectsContainer <span class="token operator">=</span> <span class="token constant">RUNTIME_GAMEPLAY</span><span class="token punctuation">.</span>pixiStage<span class="token operator">!</span><span class="token punctuation">.</span>effectsContainer<span class="token operator">!</span><span class="token punctuation">;</span>
<span class="token comment">// Pixi アプリのインターフェースを呼び出すと、画面サイズなどの確認に役立つ場合があります</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token constant">RUNTIME_GAMEPLAY</span><span class="token punctuation">.</span>pixiStage<span class="token operator">!</span><span class="token punctuation">.</span>currentApp<span class="token operator">!</span><span class="token punctuation">;</span>
<span class="token comment">// カスタム特殊効果のコンテナを作成する</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">PIXI</span></span><span class="token punctuation">.</span><span class="token function">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// カスタム特殊効果を追加する</span>
effectsContainer<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>テクスチャファイルは <code>game/tex</code> フォルダーに配置する必要があります。</p><p>次に、ファイルの先頭でカスタム特殊効果の登録メソッドを導入します。</p><p>ファイルの末尾で、登録メソッドを使用して、カスタム特殊効果を登録します。最初のパラメータは特殊効果名で、2 番目のパラメータは特殊効果を呼び出すメソッドです。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>registerPerform<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../pixiPerformManager&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 特殊効果の定義</span>
<span class="token keyword">function</span> <span class="token function">myPerform</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 登録</span>
<span class="token function">registerPerform</span><span class="token punctuation">(</span><span class="token string">&#39;myPerform&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">myPerform</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最後に、カスタム特殊効果をサポートする WebGAL をコンパイルします</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> run build<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>これで、スクリプトでカスタム特殊効果を呼び出すことができます。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>pixiPerform:myPerform;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,29),p=[i];function c(o,r){return a(),s("div",null,p)}const u=n(t,[["render",c],["__file","special-effect.html.vue"]]);export{u as default};
