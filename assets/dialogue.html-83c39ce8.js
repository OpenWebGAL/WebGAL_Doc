import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,d as n}from"./app-412530c8.js";const l="/assets/text-enhance-efa2b8c4.png",d={},i=n(`<h1 id="对话" tabindex="-1"><a class="header-anchor" href="#对话" aria-hidden="true">#</a> 对话</h1><div class="hint-container warning"><p class="hint-container-title">注意</p><p>每条对话的冒号、分号应当为英文字符！</p></div><p><strong>编写角色对话的方式非常简单，且与自然语言几乎无异。</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在字体为中和大时，文本框显示2行，而字体为小时，显示3行。</p></div><h2 id="基本角色对话" tabindex="-1"><a class="header-anchor" href="#基本角色对话" aria-hidden="true">#</a> 基本角色对话</h2><p>首先，使用记事本或 VS Code 、sublime 等文本编辑器，打开游戏资源目录下 <code>scene</code> 文件夹中的 <code>start.txt</code>，然后你就可以开始编写你的第一条对话了。</p><p>编写角色对话的方法非常简单，你只需要输入 <code>角色:对话;</code></p><p>示例：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#FFB86C;">雪之下雪乃</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">请用茶</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#FFB86C;">由比滨</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">啊，谢谢</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#FFB86C;">小町</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">谢谢雪乃姐！</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#FFB86C;">一色</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">谢谢学姐。</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在每条对话/剧本后，使用分号作为结束。（如果不写分号有时候也行，但是作者还是建议加上分号以防止 bug）。</p><h2 id="连续对话" tabindex="-1"><a class="header-anchor" href="#连续对话" aria-hidden="true">#</a> 连续对话</h2><p>如果你的多条对话没有改变角色名称，你可以使用连续对话，而可以省略角色名称，再在你需要的时候使用：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#FFB86C;">雪之下雪乃</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">你到得真早</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#6272A4;">; // 此时，对话的角色名称仍然是 “雪之下雪乃”</span></span>
<span class="line"><span style="color:#F1FA8C;">对不起，等很久了吗？</span><span style="color:#6272A4;">;</span></span>
<span class="line"><span style="color:#FFB86C;">比企谷八幡</span><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">刚到而已</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="旁白" tabindex="-1"><a class="header-anchor" href="#旁白" aria-hidden="true">#</a> 旁白</h2><p>如果你想要创建没有角色名称的旁白对话，请在冒号前留空（但不能省去冒号）：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#FF5555;">:</span><span style="color:#F1FA8C;">这是一句旁白</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="黑屏文字" tabindex="-1"><a class="header-anchor" href="#黑屏文字" aria-hidden="true">#</a> 黑屏文字</h2><p>在许多游戏中，会以黑屏显示一些文字，用来引入主题或表现角色的心理活动。你可以使用 intro 命令来演出独白：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">intro</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">回忆不需要适合的剧本，|反正一说出口，|都成了戏言。</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>独白的分拆以分隔符(|)来分割，也就是说，每一个 | 代表一个换行。在实际演出中，上面的文字会变成：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F1FA8C;">回忆不需要适合的剧本，</span></span>
<span class="line"><span style="color:#F1FA8C;">反正一说出口，</span></span>
<span class="line"><span style="color:#F1FA8C;">都成了戏言。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想要在独白结束后保持独白界面，而不是继续游戏流程，请使用 <code> -hold</code> 参数</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">intro</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">回忆不需要适合的剧本，|反正一说出口，|都成了戏言。 </span><span style="color:#FF5555;">-</span><span style="color:#FFB86C;">hold</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="获取用户输入" tabindex="-1"><a class="header-anchor" href="#获取用户输入" aria-hidden="true">#</a> 获取用户输入</h2><p>使用<code>getUserInput</code> 指令来获取用户输入，并写入变量，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">getUserInput:name -title=如何称呼你 -buttonText=确认; 将用户输入写入 name 变量中</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>title</code> 参数是提示的文本，<code>buttonText</code> 是确认按钮的文本</p><h2 id="变量插值" tabindex="-1"><a class="header-anchor" href="#变量插值" aria-hidden="true">#</a> 变量插值</h2><p>可以在语句中使用 <code>{}</code> 语法来进行变量插值，将某个变量传入语句中，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">WebGAL:很高兴遇见你，{name}！</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>变量插值也适用于人物名称，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">{name}:我也最喜欢 WebGAL 了！;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="注音" tabindex="-1"><a class="header-anchor" href="#注音" aria-hidden="true">#</a> 注音</h2><p>在对话文本中注音是日语游戏中的一种很常见的演出效果。因为日语中经常会出现一些写法和读法不一致的词语。</p><p>注音的语法是 <code>[要注音的词](注音)</code></p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">『[笑顔](えがお)』なんて、『[笑う](わらう)』なんて、[誰](だれ)でも[出来](でき)るもん…！</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="文本拓展语法" tabindex="-1"><a class="header-anchor" href="#文本拓展语法" aria-hidden="true">#</a> 文本拓展语法</h2><p>在 WebGAL 4.5.3 中，加入了“文本拓展语法”功能。该语法可以为部分文字添加文本样式。</p><p>文本拓展语法是对某段特定文本的增强。被[]包裹的，且后面跟随着()作为文本增强描述的文本是符合文本拓展语法定义的文本。</p><p>简单来说，形如以下形式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">WebGAL:[文本](style-alltext=font-style:italic\\;font-size:80%\\; style=color:#66327C\\; ruby=wen ben)</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这代表这段文本的字体大小是偏小的，并应用了斜体，颜色为 #66327C，并具有注音。</p><p>对于文本拓展语法中的不同参数，使用空格分开，并且形式总是 <code>argk=argv</code> 这样的形式</p><p>特别需要注意的是，由于 ; 是 WebGAL 的注释语法，所以在文本拓展语法中应用 ; 需要加 \\ 转义，成为 ;</p><h3 id="不同参数对应的样式作用范围" tabindex="-1"><a class="header-anchor" href="#不同参数对应的样式作用范围" aria-hidden="true">#</a> 不同参数对应的样式作用范围</h3><figure><img src="`+l+`" alt="text-enhance" tabindex="0" loading="lazy"><figcaption>text-enhance</figcaption></figure><p>在先前的示例语法中，注意到，有两个不同的参数可以为文本定义样式：<code>style</code> 和 <code>style-alltext</code>。</p><p>为文本样式区分作用域，是因为 WebGAL 为了为文本提供更好的描边效果，将一个字分为了三层——文本、描边和占位。</p><p>文本是最上层的部分，也是主要部分。描边在文本下方，被文本覆盖，用于提供白色描边且不至于破坏文字的内部形状。最下层是提供定位的透明占位符。</p><p>简而言之，如果你只需要修改文本颜色，只需要使用 <code>style</code> 参数。如果你想要应用斜体、文本大小、内外边距等效果，你则需要同时为 <code>style-alltext</code> 设置效果。</p><p><strong>特别注意：由于4.5.3 版本中的一个 bug，目前不能只应用 style-alltext 参数，因为只有检测到 style= 这样的语法，才会启动文本拓展语法</strong></p><h3 id="与注音的兼容性" tabindex="-1"><a class="header-anchor" href="#与注音的兼容性" aria-hidden="true">#</a> 与注音的兼容性</h3><p>为了兼容先前的语法，如果没有识别到 <code>style=</code> 这样的语法，则我们会将 <code>()[]</code> 语法视为注音。</p><p>如果使用了新的文本拓展语法，注音则写在 <code>ruby=</code> 参数里，上面的示例也说明了这一点。</p><h2 id="关闭文本框" tabindex="-1"><a class="header-anchor" href="#关闭文本框" aria-hidden="true">#</a> 关闭文本框</h2><p>有时候，为了一些特殊的演出效果，可能你希望临时关闭文本框，所以你可以使用以下指令来关闭文本框：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setTextbox</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">hide</span><span style="color:#6272A4;">; // 关闭文本框</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当 <code>setTextbox</code> 指令的值为 <code>hide</code> 时，会关闭文本框，且用户无法以任何方式打开。如果想要重新显示文本框，请再次调用此命令，并输入除<code>hide</code>以外的任意值。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">setTextbox</span><span style="color:#FF5555;">:</span><span style="color:#F8F8F2;">on</span><span style="color:#6272A4;">; // 可以是除 hide 以外的任意值。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="结束游戏并返回到标题" tabindex="-1"><a class="header-anchor" href="#结束游戏并返回到标题" aria-hidden="true">#</a> 结束游戏并返回到标题</h2><p>如果你想要在剧情结束后结束游戏并返回到标题，请使用：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">end</span><span style="color:#6272A4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，就可以使游戏返回标题界面。</p><h2 id="电影模式-测试功能" tabindex="-1"><a class="header-anchor" href="#电影模式-测试功能" aria-hidden="true">#</a> 电影模式（测试功能）</h2><p>使用 <code>filmMode:enable;</code> 来开启电影模式。<br> 使用 <code>filmMode:none;</code> 来关闭电影模式。</p>`,66),c=[i];function o(r,p){return a(),e("div",null,c)}const h=s(d,[["render",o],["__file","dialogue.html.vue"]]);export{h as default};
