import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,a,e,b as s,d as t}from"./app-9ca9b8b6.js";const p={},l=t('<h1 id="webgal-terre-貢献ガイド" tabindex="-1"><a class="header-anchor" href="#webgal-terre-貢献ガイド" aria-hidden="true">#</a> WebGAL Terre 貢献ガイド</h1><p>WebGAL Terre への貢献を歓迎します！WebGAL Terre は、私たちが最も創造性と競争力を注ぎ込むプロジェクトです。プログラミングに不慣れなクリエイターが WebGAL を使って作品を制作できるように支援することに力を注いでいます。ゲームスクリプトからカスタム UI まで、ほぼすべての制作関連タスクにおいて、敷居を下げ、制作をより簡単にすべく、グラフィカルな編集方法を提供することに努めています。</p><p>それに加えて、ほぼすべての機能に対してコードによる記述方法も提供しています。コード編集とグラフィカル編集モジュールは完全に互換性を持つように設計されているため、クリエイターは 2 つのモードをシームレスに切り替えることができます。</p><p>このエキサイティングなプロジェクトに参加する前に、以下の規約をお読みください。</p><h2 id="貢献の要件" tabindex="-1"><a class="header-anchor" href="#貢献の要件" aria-hidden="true">#</a> 貢献の要件</h2><p>貢献内容をより良く理解し、レビューするために、以下の点にご注意ください。</p><ul><li><p><strong>コードコメント:</strong> コードのロジックを理解しやすくするために、重要な部分にコメントを追加することをお勧めします。</p></li><li><p><strong>機能テスト:</strong> 機能を追加または変更した場合、機能が正しく動作することを確認するためのテスト方法を提供してください。コードのリファクタリングを行った場合は、影響を受ける範囲をカバーし、リファクタリングによって新しい問題が発生していないことを確認するためのテスト方法も提供してください。</p></li><li><p><strong>明確な説明:</strong> プルリクエストを提出する際には、行った変更と、その背後にある理由を簡単に説明してください。これは、貢献内容をより早く理解するのに役立ちます。</p></li></ul><h2 id="プロジェクト紹介" tabindex="-1"><a class="header-anchor" href="#プロジェクト紹介" aria-hidden="true">#</a> プロジェクト紹介</h2><p>WebGAL Terre は、TypeScript を使用したフルスタック開発で、パッケージマネージャーとして yarn を、monorepo マネージャーとして yarn workspace を使用しています。</p><h2 id="プロジェクトの起動" tabindex="-1"><a class="header-anchor" href="#プロジェクトの起動" aria-hidden="true">#</a> プロジェクトの起動</h2><h3 id="依存関係のインストール" tabindex="-1"><a class="header-anchor" href="#依存関係のインストール" aria-hidden="true">#</a> 依存関係のインストール</h3>',11),d={href:"https://yarnpkg.com/",target:"_blank",rel:"noopener noreferrer"},u=a("h3",{id:"リポジトリのクローン",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#リポジトリのクローン","aria-hidden":"true"},"#"),e(" リポジトリのクローン")],-1),b={href:"https://github.com/OpenWebGAL/WebGAL_Terre",target:"_blank",rel:"noopener noreferrer"},m=t(`<h3 id="依存関係のインストール-1" tabindex="-1"><a class="header-anchor" href="#依存関係のインストール-1" aria-hidden="true">#</a> 依存関係のインストール</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="開発サーバーの起動" tabindex="-1"><a class="header-anchor" href="#開発サーバーの起動" aria-hidden="true">#</a> 開発サーバーの起動</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>これにより、開発サーバーが起動し、デフォルトブラウザでアプリケーションが開きます。</p><h3 id="プロジェクトのビルド" tabindex="-1"><a class="header-anchor" href="#プロジェクトのビルド" aria-hidden="true">#</a> プロジェクトのビルド</h3><p>リリース可能なバージョンを生成するには、ビルドスクリプトを実行する必要があります。</p><ul><li><strong>Windows:</strong> <code>release.sh</code></li><li><strong>その他の環境:</strong> プロジェクトのルートディレクトリにある対応するビルドスクリプトを確認してください。</li></ul><p>ビルドが完了すると、<code>release</code> ディレクトリにビルド成果物が配置されます。</p><h2 id="terre-に同梱されている-webgal-エンジンテンプレートの更新" tabindex="-1"><a class="header-anchor" href="#terre-に同梱されている-webgal-エンジンテンプレートの更新" aria-hidden="true">#</a> Terre に同梱されている WebGAL エンジンテンプレートの更新</h2><p>通常、WebGAL の更新後、最新バージョンのエンジンテンプレートを Terre プロジェクトに更新します。Terre でカスタマイズした WebGAL エンジンを使用する場合は、次の手順に従ってください。</p><ol><li>WebGAL エンジンリポジトリをクローンします（隣接ディレクトリにクローンすることをお勧めします。これにより、自動化スクリプトを使用できます）</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone https://github.com/OpenWebGAL/WebGAL.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>（Terre プロジェクトの隣接ディレクトリに WebGAL プロジェクトをクローンした場合、そうでない開発者は無視してください）</strong> WebGAL エンジンリポジトリで自動化スクリプトを実行して、WebGAL を WebGAL Terre にビルドします</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sh release-to-terre.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>以下の手順は、手動でビルドして Terre のエンジンテンプレートを更新する場合に適用されます。自動化スクリプトを使用する開発者は無視してください！</strong></p></div><ol start="2"><li>WebGAL プロジェクトをビルドします（この手順は WebGAL エンジンリポジトリで実行します）</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn
yarn build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>WebGAL Terre のエンジンテンプレートを削除し、エンジンプロジェクトのビルド成果物を WebGAL Terre のテンプレートディレクトリに移動します</li></ol><p><strong>ここでは、Terre プロジェクトの隣接ディレクトリに WebGAL プロジェクトをクローンしていると想定しています。異なるディレクトリ構造を使用している場合は、それに応じて変更してください。</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Terre ディレクトリに移動します
cd ../WebGAL_Terre/packages/terre2/assets/templates/WebGAL_Template || exit
# 他のファイルを削除します
rm -r assets
rm -r index.html
rm -r webgal-serviceworker.js

# WebGAL ビルドディレクトリに移動します
cd ../../../../../../WebGAL/packages/webgal || exit
# コピーします
cp -r dist/index.html ../../../WebGAL_Terre/packages/terre2/assets/templates/WebGAL_Template
cp -r dist/assets ../../../WebGAL_Terre/packages/terre2/assets/templates/WebGAL_Template
cp -r dist/webgal-serviceworker.js ../../../WebGAL_Terre/packages/terre2/assets/templates/WebGAL_Template
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="パッケージ紹介" tabindex="-1"><a class="header-anchor" href="#パッケージ紹介" aria-hidden="true">#</a> パッケージ紹介</h2><table><thead><tr><th>パッケージ名</th><th>説明</th></tr></thead><tbody><tr><td><code>packages/dev-server</code></td><td>80ポートでデバッグ、サーバーユーザーに便利</td></tr><tr><td><code>packages/origine2</code></td><td>エディターフロントエンド</td></tr><tr><td><code>packages/terre-electron</code></td><td>Electron 版 Terre エディター</td></tr><tr><td><code>packages/terre2</code></td><td>エディターバックエンド</td></tr><tr><td><code>packages/vscode-ws-jsonrpc-webgal</code></td><td>WebGAL エディターバックエンド用のカスタムパッケージ、いくつかのバグを修正</td></tr><tr><td><code>packages/WebGAL-electron</code></td><td>WebGAL の Electron パッケージ</td></tr></tbody></table><h2 id="webgal-terre-フロントエンドとバックエンドの連携デバッグガイド" tabindex="-1"><a class="header-anchor" href="#webgal-terre-フロントエンドとバックエンドの連携デバッグガイド" aria-hidden="true">#</a> WebGAL Terre フロントエンドとバックエンドの連携デバッグガイド</h2><p>WebGAL Terre は、TypeScript を使用したフルスタックプロジェクトであり、OpenAPI を使用してバックエンドインターフェースをリクエストするためのコードを生成します。</p><p>このプロセスを正しく機能させるには、WebGAL Terre バックエンドのインターフェースを開発する際に、以下のアノテーションに注意してください。</p><p><strong>1. インターフェースアノテーションの紹介</strong></p><p>次のコード例は、バックエンドインターフェースに必要な主要なアノテーションを示しています。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">&#39;createGame&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiOperation</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> summary<span class="token operator">:</span> <span class="token string">&#39;Create a new game&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiResponse</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&#39;Game creation result.&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiBody</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> CreateGameDto<span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&#39;Game creation data&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">createGame</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> createGameData<span class="token operator">:</span> CreateGameDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> createResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>manageGame<span class="token punctuation">.</span><span class="token function">createGame</span><span class="token punctuation">(</span>
      createGameData<span class="token punctuation">.</span>gameName<span class="token punctuation">,</span>
      createGameData<span class="token punctuation">.</span>derivative<span class="token punctuation">,</span>
      createGameData<span class="token punctuation">.</span>templateName<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>createResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token string">&#39;success&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token string">&#39;failed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. コード例の詳細説明</strong></p><p>各アノテーションの役割を理解するために、このコードを 1 行ずつ分析してみましょう。</p><ul><li><p><strong><code>@Post(&#39;createGame&#39;)</code></strong>:</p><ul><li><code>@Post</code>: これが POST リクエストインターフェースであることを示します。</li><li><code>&#39;createGame&#39;</code>: インターフェースのパス、つまり <code>/createGame</code> を定義します。</li></ul></li><li><p><strong><code>@ApiOperation({ summary: &#39;Create a new game&#39; })</code></strong>:</p><ul><li><code>@ApiOperation</code>: インターフェースの機能を記述するために使用されます。</li><li><code>summary</code>: インターフェースの役割を簡単に要約し、生成された OpenAPI ドキュメントに表示されます。</li></ul></li><li><p><strong><code>@ApiResponse({ status: 200, description: &#39;Game creation result.&#39; })</code></strong>:</p><ul><li><code>@ApiResponse</code>: インターフェースの可能な応答を記述します。</li><li><code>status</code>: HTTP ステータスコードを指定します。ここでは 200 で、成功を示します。</li><li><code>description</code>: このステータスコードでの応答内容を記述します。</li></ul></li><li><p><strong><code>@ApiBody({ type: CreateGameDto, description: &#39;Game creation data&#39; })</code></strong>:</p><ul><li><code>@ApiBody</code>: リクエスト本文のデータ型と説明を指定します。</li><li><code>type</code>: リクエスト本文のデータ構造を示します。ここでは、事前に定義された DTO（データ転送オブジェクト）である <code>CreateGameDto</code> を使用しています。</li><li><code>description</code>: リクエスト本文データの意味を記述します。</li></ul></li><li><p><strong><code>async createGame(@Body() createGameData: CreateGameDto)</code></strong>:</p><ul><li><code>async</code>: これが非同期関数であることを示します。</li><li><code>createGame</code>: インターフェースの関数名です。</li><li><code>@Body()</code>: リクエスト本文からデータを取得します。</li><li><code>createGameData: CreateGameDto</code>: リクエスト本文データを <code>CreateGameDto</code> 型のオブジェクトに解析します。</li></ul></li></ul><p><strong>3. フロントエンドプロジェクトでの OpenAPI の更新</strong></p><p>フロントエンドプロジェクトで最新のバックエンドインターフェースを使用できるようにするには、開発中に OpenAPI 定義を定期的に更新する必要があります。</p><p><strong>手順:</strong></p><ol><li>バックエンドプロジェクトが実行されていることを確認します（前述のように、<code>yarn dev</code> を実行します）。</li><li><code>packages/origine2</code> ディレクトリで、コマンド <code>yarn openapi</code> を実行します。</li></ol><p>このコマンドは、バックエンドコードのアノテーションに基づいて最新の OpenAPI 定義ファイルを自動的に生成します。フロントエンドプロジェクトは、このファイルを使用してインターフェースをリクエストするためのコードを生成し、フロントエンドとバックエンドのインターフェースの一貫性を保証します。</p><p><strong>4. フロントエンドプロジェクトでのインターフェースの使用</strong></p><p>WebGAL フロントエンドプロジェクトでは、次の方法でバックエンドインターフェースを呼び出すことができます。</p><ol><li><code>api</code> オブジェクトをインポートします: <code>import {api} from &quot;@/api&quot;;</code></li><li><code>api</code> オブジェクトのメソッドを呼び出します。例: <code>api.manageGameControllerGetGameList()</code>。</li></ol><p><code>api</code> オブジェクトには、すべてのバックエンドインターフェースに対応するメソッドが含まれており、インターフェース名に基づいて直接呼び出すことができます。</p><h2 id="開発に関するその他の情報" tabindex="-1"><a class="header-anchor" href="#開発に関するその他の情報" aria-hidden="true">#</a> 開発に関するその他の情報</h2><p>これに加えて、ソースコードの重要なディレクトリには、このモジュールの原理を説明するドキュメントもいくつか用意されています。この情報は中国語で提供されます。今日では、大規模言語モデルは翻訳において十分な性能を発揮するため、中国語が読めなくても心配する必要はありません。大規模言語モデルを使用して、自分の言語に翻訳してみてください。</p>`,43);function h(k,v){const n=o("ExternalLinkIcon");return i(),c("div",null,[l,a("p",null,[e("まず、"),a("a",d,[e("Yarn"),s(n)]),e(" がインストールされていることを確認してください。Yarn がインストールされていない場合は、公式ドキュメントに従ってインストールしてください。")]),u,a("p",null,[e("WebGAL Terre のリポジトリは "),a("a",b,[e("WebGAL Terre - GitHub"),s(n)]),e(" にあります。")]),m])}const A=r(p,[["render",h],["__file","terre.html.vue"]]);export{A as default};
