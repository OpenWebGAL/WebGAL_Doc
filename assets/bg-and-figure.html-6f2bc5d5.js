import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as n}from"./app-d039e7c3.js";const t={},s=n(`<h1 id="background-and-figure" tabindex="-1"><a class="header-anchor" href="#background-and-figure" aria-hidden="true">#</a> Background and Figure</h1><h2 id="change-background-character-sprite" tabindex="-1"><a class="header-anchor" href="#change-background-character-sprite" aria-hidden="true">#</a> Change background/character sprite</h2><p>For WebGAL to be able to read background images and character sprites, your background images should be placed in the background folder, and sprite images should be placed in the figure folder.</p><p>Next, you can use the following simple statements to change the currently displayed background image and character sprite:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>changeBg:testBG03.jpg; // Change background
changeFigure:testFigure02.png; // Change character sprite
changeBg:none; // Close background 
changeFigure:none; // Close character sprite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You may find that after you change the background image or character sprite, you need to click the mouse again to display the next line of dialogue. If you want to execute the content of the next statement immediately after changing the background image/sprite, please use:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>changeBg:testBG03.jpg -next;  
changeFigure:testFigure02.png -next; // Change character sprite
Isshiki: Thank you, senpai!;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you do this, the program will immediately execute the next statement after replacing the background image/sprite.</p><h2 id="place-sprites-in-different-positions" tabindex="-1"><a class="header-anchor" href="#place-sprites-in-different-positions" aria-hidden="true">#</a> Place sprites in different positions</h2><p>Now you can place different sprites in three different positions on the page. You just need to add the position you want to place in the statement that places the sprite. Examples are as follows:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>changeFigure:testFigure03.png -left;
changeFigure:testFigure04.png;  
changeFigure:testFigure03.png -right;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above three lines correspond to the left, middle and right three different positions. The sprites in the three different positions are independent of each other, so if you need to clear the sprite, you must clear them independently:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>changeFigure:none -left;
changeFigure:none;
changeFigure:none -right;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to execute the statement immediately after changing the sprite, the operation method is the same as before, that is, add the parameter <code>-next</code>:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>changeFigure:testFigure03.png -left -next;
changeFigure:testFigure04.png -next;
changeFigure:testFigure03.png -right -next;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="free-sprites-with-id" tabindex="-1"><a class="header-anchor" href="#free-sprites-with-id" aria-hidden="true">#</a> Free sprites with ID</h2><p>If you want to control sprites more precisely, you can specify an <code>id</code> and initial position for the sprite:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>; // A free sprite with initial position on the right
changeFigure:testFigure03.png -left -id=test1;
; // Close sprite by id
changeFigure:none -id=test1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: If you want to reset the position of a sprite with ID, close it first and then reopen it.</p><h2 id="place-mini-avatar" tabindex="-1"><a class="header-anchor" href="#place-mini-avatar" aria-hidden="true">#</a> Place mini avatar</h2><p>Many games can place a mini avatar in the lower left corner of the text box. The following is the syntax used in this engine:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>miniAvatar:minipic_test.png; // Display minipic_test.png in the lower left corner
miniAvatar:none; // Close this mini avatar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unlock-cg-for-appreciation" tabindex="-1"><a class="header-anchor" href="#unlock-cg-for-appreciation" aria-hidden="true">#</a> Unlock CG for appreciation</h2><p>Use <code>unlockCg</code> to unlock a CG for appreciation.</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>; // Unlock the CG and give it a name
unlockCg:xgmain.jpeg -name=Starlight Caf√© and the Butterfly of Death -series=1;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>-series</code> parameter is optional, and represents which series the current CG belongs to. Tachis from the same series will be shown together later (i.e. shown as switchable CGs from the same series).</p>`,26),r=[s];function d(c,o){return i(),a("div",null,r)}const u=e(t,[["render",d],["__file","bg-and-figure.html.vue"]]);export{u as default};
