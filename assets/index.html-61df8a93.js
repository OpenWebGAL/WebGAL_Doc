import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as d,d as i}from"./app-935dda76.js";const c={},r=i(`<h1 id="webgal-技術紹介" tabindex="-1"><a class="header-anchor" href="#webgal-技術紹介" aria-hidden="true">#</a> WebGAL 技術紹介</h1><h2 id="シーンシステム-プリロード" tabindex="-1"><a class="header-anchor" href="#シーンシステム-プリロード" aria-hidden="true">#</a> シーンシステム &amp; プリロード</h2><h3 id="シーンの取得" tabindex="-1"><a class="header-anchor" href="#シーンの取得" aria-hidden="true">#</a> シーンの取得</h3><p>WebGAL のシーンは、ファイル単位で管理されます。一般的に、WebGAL スクリプトファイルの拡張子は <code>.txt</code> です。多くのプログラミング言語が <code>main</code> 関数をエントリーポイントとして持つように、WebGAL のエントリーシーンは <code>start.txt</code> です。WebGAL は最初に <code>start.txt</code> を取得し、それを WebGAL パーサーによってシーンオブジェクトに解析します。任意のシーンでは、<code>choose</code>、<code>changeScene</code>、<code>callScene</code> といった方法を使用してシーンの切り替えや呼び出しが行えます。シーンの切り替えは現在のシーンを直接置き換えますが、シーンの呼び出しは新しいシーンをスタックにプッシュして実行し、実行後に呼び出し元の親シーンに戻ります。</p><h3 id="シーンの事前読み込み" tabindex="-1"><a class="header-anchor" href="#シーンの事前読み込み" aria-hidden="true">#</a> シーンの事前読み込み</h3><p>WebGAL は、シーンの解析と同時に、シーンに含まれるリソースも解析します。各シーンファイルには、画像、音声、およびビデオファイルなどのリソースが含まれています。これらのファイルは、シーンの解析が完了した後にプリロードが開始され、ユーザーがゲームプレイ中にリソースの読み込みを待つ可能性を最小限に抑えます。また、シーンの切り替え時にゲームのスムーズな動作を実現するために、WebGAL は現在のシーンファイルから参照されているシーンファイルのリソースも読み込みます。ただし、リソースの無駄を防ぐため、WebGAL はシーンの一層のみをプリロードします。</p><h2 id="webgal-パーサー" tabindex="-1"><a class="header-anchor" href="#webgal-パーサー" aria-hidden="true">#</a> WebGAL パーサー</h2><h3 id="スクリプト解析-i-シーンの分割" tabindex="-1"><a class="header-anchor" href="#スクリプト解析-i-シーンの分割" aria-hidden="true">#</a> スクリプト解析 Ⅰ - シーンの分割</h3><p>WebGAL のシーンファイルは主に改行でステートメントを区切ります。解析の最初に、WebGAL パーサーは改行コードに基づいてステートメントを分割します。セミコロンがある場合は、セミコロンの前の文字列を取得します。つまり、WebGAL スクリプトのコメント方法は、セミコロンの後に記述することです。</p><h3 id="スクリプト解析-ii-ステートメントタイプの解析" tabindex="-1"><a class="header-anchor" href="#スクリプト解析-ii-ステートメントタイプの解析" aria-hidden="true">#</a> スクリプト解析 Ⅱ - ステートメントタイプの解析</h3><p>WebGAL のステートメントは一般的に次のような形式です。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>command:content -arg1 -arg2 ......;コメント
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ここで、command はステートメントのコマンドを表し、<code>bgm</code>、<code>changeFigure</code>、<code>choose</code> などのコマンドがあります。これはステートメントに対する制御アクションを示します。<code>content</code> はステートメントの主要な内容を表します。例えば、<code>bgm:Teabreak.mp3</code> は、BGM として音声ファイルを再生することを表します。</p><h3 id="スクリプト解析-iii-会話の特殊処理" tabindex="-1"><a class="header-anchor" href="#スクリプト解析-iii-会話の特殊処理" aria-hidden="true">#</a> スクリプト解析 Ⅲ - 会話の特殊処理</h3><p>WebGAL のスクリプトファイルでは、通常以下の形式で会話が書かれます。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>森川由綺: 胸につかえていることを、时は解决してくれない。忘却のラベルを贴るだけで -voice_1.ogg;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ビジュアルノベルでは、会話がスクリプトの主要な構成要素であるため、WebGAL ではシンタックスシュガーが設計されています。もしスクリプトの command 部分がどのコマンドとも解析できない場合、WebGAL はそれを会話として扱います。また、音声の指定もシンプルにされており、ファイル名のみを指定すれば十分です。上記の会話は実際に say コマンドとして解析されます。</p><p>したがって、この会話の正しい表現は次のようになります。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>say:胸につかえていることを、时は解决してくれない。忘却のラベルを贴るだけで -speaker=森川由綺 -vocal=voice_1.ogg;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>また、もし対話が一人のキャラクターによって行われる場合、話者が変わる前にキャラクター名を省略することができます。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>森川由綺: 胸につかえていることを;
时は解决してくれない; 
忘却のラベルを贴るだけで;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会話の特殊な処理により、スクリプトの作成効率が大幅に向上します。</p><h3 id="スクリプト解析-iv-パラメータ解析" tabindex="-1"><a class="header-anchor" href="#スクリプト解析-iv-パラメータ解析" aria-hidden="true">#</a> スクリプト解析 Ⅳ - パラメータ解析</h3><p>content の後に <code> -</code> で区切られたものは追加パラメータです。特に注意が必要なのは、追加パラメータの <code>-</code> の前にはスペースが必要であることです。そうでない場合、WebGAL はそれを追加パラメータではなく普通の <code>-</code> とみなします。</p><p>WebGAL のパラメータは <code>-key=value</code> の形式で表されます。ここで、<code>key</code> の型は <code>string</code> であり、<code>value</code> の型は動的に決定され、次の3つの可能な型のいずれかで存在することができます: <code>string</code>、<code>number</code>、<code>boolean</code>。</p><p>例えば、<code>-key=s</code> の <code>value</code> は <code>string</code> です。<code>-key=1</code> の <code>value</code> は <code>number</code> です。<code>-key=true</code> または <code>-key=false</code> の <code>value</code> は <code>boolean</code> です。</p><p>また、<code>value</code> を省略して <code>key</code> のみを記述するパラメータは <code>-key=true</code> と解釈され、これは省略された形式のシンタックスシュガーです。このシンタックスシュガーは非常に重要であり、WebGAL には <code>-next</code> という重要なパラメータがあります。これは、現在のステートメントの実行後に直ちに次のステートメントを実行することを示すために使用されます。このシンタックスシュガーがなっかた場合、常に <code>-next=true</code> と書く必要があります。</p><h3 id="スクリプト解析-v-リソースの処理とプリロード" tabindex="-1"><a class="header-anchor" href="#スクリプト解析-v-リソースの処理とプリロード" aria-hidden="true">#</a> スクリプト解析 Ⅴ - リソースの処理とプリロード</h3><p>スクリプトの解析中に、スクリプトが必要とするリソースを取得することができます。例えば、<code>bgm</code> ステートメントでは通常音声リソースが必要であり、<code>playVideo</code> ステートメントでは通常ビデオリソースが必要です。また、<code>changeBg</code> ステートメントでは通常画像リソースが必要です。WebGAL のシーンパーサーは、すべてのシーンのステートメントが必要とするリソースをまとめて、プリローダーに渡してリソースをプリロードします。また、<code>changeScene</code>、<code>choose</code>、<code>callScene</code> など、サブシーンを呼び出す必要がある場合には、サブシーンもスキャンされ、解析され、その中のリソースがプリロードされます。</p><h2 id="実行制御システム" tabindex="-1"><a class="header-anchor" href="#実行制御システム" aria-hidden="true">#</a> 実行制御システム</h2><h3 id="スタンバイフェイズ-開始準備" tabindex="-1"><a class="header-anchor" href="#スタンバイフェイズ-開始準備" aria-hidden="true">#</a> スタンバイフェイズ: 開始準備</h3><h3 id="メインフェイズ-i-コマンドの読み取り、条件判断の実行" tabindex="-1"><a class="header-anchor" href="#メインフェイズ-i-コマンドの読み取り、条件判断の実行" aria-hidden="true">#</a> メインフェイズ I: コマンドの読み取り、条件判断の実行</h3><h3 id="メインフェイズ-ii-コマンド制御モジュールからコマンドコントローラーの呼び出し、取得" tabindex="-1"><a class="header-anchor" href="#メインフェイズ-ii-コマンド制御モジュールからコマンドコントローラーの呼び出し、取得" aria-hidden="true">#</a> メインフェイズ II: コマンド制御モジュールからコマンドコントローラーの呼び出し、取得</h3><h3 id="エンドフェイズ-連続コマンドの処理、バックログの更新" tabindex="-1"><a class="header-anchor" href="#エンドフェイズ-連続コマンドの処理、バックログの更新" aria-hidden="true">#</a> エンドフェイズ: 連続コマンドの処理、バックログの更新</h3><h3 id="オートモード-スキップモード" tabindex="-1"><a class="header-anchor" href="#オートモード-スキップモード" aria-hidden="true">#</a> オートモード &amp; スキップモード</h3><h2 id="コマンド制御" tabindex="-1"><a class="header-anchor" href="#コマンド制御" aria-hidden="true">#</a> コマンド制御</h2><h3 id="webgal-コマンドタイプ" tabindex="-1"><a class="header-anchor" href="#webgal-コマンドタイプ" aria-hidden="true">#</a> WebGAL コマンドタイプ</h3><h3 id="コマンドの自動破棄、終了判定、ブロックロジック" tabindex="-1"><a class="header-anchor" href="#コマンドの自動破棄、終了判定、ブロックロジック" aria-hidden="true">#</a> コマンドの自動破棄、終了判定、ブロックロジック</h3><h2 id="シーン制御-アニメーション制御" tabindex="-1"><a class="header-anchor" href="#シーン制御-アニメーション制御" aria-hidden="true">#</a> シーン制御 &amp; アニメーション制御</h2><h3 id="データ駆動型-pixi-シーンコントローラー" tabindex="-1"><a class="header-anchor" href="#データ駆動型-pixi-シーンコントローラー" aria-hidden="true">#</a> データ駆動型 Pixi シーンコントローラー</h3><h3 id="アニメーション-トランスフォム制御" tabindex="-1"><a class="header-anchor" href="#アニメーション-トランスフォム制御" aria-hidden="true">#</a> アニメーション &amp; トランスフォム制御</h3><h2 id="セーブ、ロード、ロールバックとユーザーデータ" tabindex="-1"><a class="header-anchor" href="#セーブ、ロード、ロールバックとユーザーデータ" aria-hidden="true">#</a> セーブ、ロード、ロールバックとユーザーデータ</h2><h3 id="webgal-ステートテーブルの紹介" tabindex="-1"><a class="header-anchor" href="#webgal-ステートテーブルの紹介" aria-hidden="true">#</a> WebGAL ステートテーブルの紹介</h3><h3 id="実行状態の保存-復元" tabindex="-1"><a class="header-anchor" href="#実行状態の保存-復元" aria-hidden="true">#</a> 実行状態の保存 &amp; 復元</h3><h3 id="セーブデータ-その他のユーザーデータの保存" tabindex="-1"><a class="header-anchor" href="#セーブデータ-その他のユーザーデータの保存" aria-hidden="true">#</a> セーブデータ &amp; その他のユーザーデータの保存</h3><h2 id="鑑賞モジュール-細かい機能" tabindex="-1"><a class="header-anchor" href="#鑑賞モジュール-細かい機能" aria-hidden="true">#</a> 鑑賞モジュール &amp; 細かい機能</h2><h3 id="鑑賞モジュール" tabindex="-1"><a class="header-anchor" href="#鑑賞モジュール" aria-hidden="true">#</a> 鑑賞モジュール</h3><h3 id="ブラウザを離れた際の状態保持-「続きから」" tabindex="-1"><a class="header-anchor" href="#ブラウザを離れた際の状態保持-「続きから」" aria-hidden="true">#</a> ブラウザを離れた際の状態保持 &amp; 「続きから」</h3><h3 id="ショートカットキー-マウス操作" tabindex="-1"><a class="header-anchor" href="#ショートカットキー-マウス操作" aria-hidden="true">#</a> ショートカットキー &amp; マウス操作</h3>`,49),h=[r];function n(o,t){return a(),d("div",null,h)}const b=e(c,[["render",n],["__file","index.html.vue"]]);export{b as default};
