import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as n}from"./app-7008dfd5.js";const s={},t=n(`<h1 id="dialogue" tabindex="-1"><a class="header-anchor" href="#dialogue" aria-hidden="true">#</a> Dialogue</h1><p><strong>The way to write scripts is very simple and almost identical to natural language.</strong></p><h2 id="basic-character-dialogue" tabindex="-1"><a class="header-anchor" href="#basic-character-dialogue" aria-hidden="true">#</a> Basic character dialogue</h2><p>First, use Notepad, VS Code, Sublime Text and other text editors to open start.txt in the scene folder under the game resource directory, and then you can start writing your first line of dialogue.</p><p>The method of writing character dialogue is very simple. You just need to enter:</p><p><strong>Note that the colons and semicolons for each line of dialogue should be English characters!</strong></p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>Character: Dialogue; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>Yukino: Please have some tea;
Yui: Oh, thank you;
Komachi: Thank you, Sister Yukino!;
Isshiki: Thank you, senpai.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After each dialogue/script, use a semicolon as the ending. (If you don&#39;t use a semicolon sometimes, it might still work, but the author suggests adding a semicolon to prevent bugs).</p><h2 id="continuous-dialogue" tabindex="-1"><a class="header-anchor" href="#continuous-dialogue" aria-hidden="true">#</a> Continuous dialogue</h2><p>If you don&#39;t change the character name in multiple lines of dialogue, you can use continuous dialogue and omit the character name, then use it again when needed:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>Yukino: You&#39;re here early;
; // At this point, the character for the dialogue is still &quot;Yukino&quot;.
Sorry, have you been waiting long?;
Yui: I just got here;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="narration" tabindex="-1"><a class="header-anchor" href="#narration" aria-hidden="true">#</a> Narration</h2><p>If you want to create narration dialogue without a character name, leave it blank before the colon (but keep the colon):</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>:This is a line of narration;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="black-screen-text-display" tabindex="-1"><a class="header-anchor" href="#black-screen-text-display" aria-hidden="true">#</a> Black screen text display</h2><p>In many games, some text will be displayed in black screens, used to introduce themes or show characters&#39; psychological activities. You can use the intro command to play a monologue:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>intro:Memories don&#39;t need a suitable script,|After all, once spoken,|it all becomes empty words.;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The monologue is separated by separators (|), which means that each | represents a new line. In actual performance, the above text will become:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>Memories don&#39;t need a suitable script,
After all, once spoken,
it all becomes empty words.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hide-text-box" tabindex="-1"><a class="header-anchor" href="#hide-text-box" aria-hidden="true">#</a> Hide text box</h2><p>Sometimes, for some special performance effects, you may want to temporarily hide the text box. So you can use the following instructions:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setTextbox:hide;  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>to close the text box. When the value of the <code>setTextbox</code> instruction is <code>hide</code>, the text box will be closed and the user will not be able to open it in any way. If you want to redisplay the text box, call this command again and enter any value except <code>hide</code>.</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setTextbox:on; // Can be any value except hide.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="end-game-and-return-to-title" tabindex="-1"><a class="header-anchor" href="#end-game-and-return-to-title" aria-hidden="true">#</a> End game and return to title</h2><p>If you want to end the game after the plot ends and return to the title, please use:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>end;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="movie-mode-test-function" tabindex="-1"><a class="header-anchor" href="#movie-mode-test-function" aria-hidden="true">#</a> Movie mode (test function)</h2><p>Use <code>filmMode:enable;</code> to enable movie mode.<br> Use <code>filmMode:none;</code> to disable movie mode.</p>`,31),d=[t];function o(r,l){return a(),i("div",null,d)}const h=e(s,[["render",o],["__file","dialogue.html.vue"]]);export{h as default};
