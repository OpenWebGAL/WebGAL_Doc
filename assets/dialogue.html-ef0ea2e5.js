import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as d,d as i}from"./app-dac030e0.js";const n={},s=i(`<h1 id="会話" tabindex="-1"><a class="header-anchor" href="#会話" aria-hidden="true">#</a> 会話</h1><div class="hint-container warning"><p class="hint-container-title">注意</p><p>各会話の冒頭のコロン、セミコロンは英字で記述してください！</p></div><p><strong>キャラクターの会話の書き方はとても簡単で、自然言語とほとんど変わりません。</strong></p><div class="hint-container info"><p class="hint-container-title">関連情報</p><p>フォントが中、大のときはテキストボックスは2行表示され、フォントが小のときは3行表示されます。</p></div><h2 id="基本的なキャラクターの会話" tabindex="-1"><a class="header-anchor" href="#基本的なキャラクターの会話" aria-hidden="true">#</a> 基本的なキャラクターの会話</h2><p>まず、メモ帳やVS Code、sublimeなどのテキストエディタで、ゲームのリソースディレクトリにある<code>scene</code>フォルダの中の<code>start.txt</code>を開いて、最初の会話の記述を始めましょう。</p><p>キャラクターの会話の書き方はとても簡単で、<code>キャラクター:会話;</code>と入力するだけです。</p><p>例：</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>雪ノ下雪乃:お茶どうぞ;
由比ヶ浜:あ、ありがとう;
小町:雪乃姉ありがとう！;
一色:先輩ありがとう。;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各会話/シナリオの最後には、セミコロンを打って終了してください。（セミコロンを打たなくても動く場合もありますが、バグ防止のため作者はセミコロンを打つことを推奨します。）</p><h2 id="連続会話" tabindex="-1"><a class="header-anchor" href="#連続会話" aria-hidden="true">#</a> 連続会話</h2><p>複数の会話でキャラクター名が変わらない場合は、連続会話としてキャラクター名を省略して、必要なときにだけキャラクター名を書くことができます。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>雪ノ下雪乃:随分早いですね;
; // このとき、会話のキャラクター名はまだ「雪ノ下雪乃」です
お待たせしてしまいましたか？;
比企谷八幡:今来たばかりですよ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ナレーション" tabindex="-1"><a class="header-anchor" href="#ナレーション" aria-hidden="true">#</a> ナレーション</h2><p>キャラクター名のないナレーションの会話を作成したい場合は、コロンの前に空白を入れてください（コロンは省略できません）。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>:これはナレーションです;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="黒画面テキスト" tabindex="-1"><a class="header-anchor" href="#黒画面テキスト" aria-hidden="true">#</a> 黒画面テキスト</h2><p>多くのゲームでは、テーマを導入したり、キャラクターの心理描写を表現したりするために、黒画面にテキストが表示されます。独白を演出するには、introコマンドを使用します。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>intro:思い出には適した脚本はいらない、|口に出せば、|それは戯言になる。;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>独白の改行は区切り記号（|）で行われます。つまり、|ごとに改行されます。実際の演出では、上記のテキストは次のように表示されます。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>思い出には適した脚本はいらない、
口に出せば、
それは戯言になる。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ユーザー入力を取得する" tabindex="-1"><a class="header-anchor" href="#ユーザー入力を取得する" aria-hidden="true">#</a> ユーザー入力を取得する</h2><p><code>getUserInput</code>コマンドを使用してユーザー入力を取得し、変数に書き込みます。たとえば、</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>getUserInput:name -title=あなたの呼び方は -buttonText=決定; ユーザー入力をname変数に書き込む
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ここで、<code>title</code>パラメータはプロンプトのテキストで、<code>buttonText</code>は確認ボタンのテキストです。</p><h2 id="変数の補完" tabindex="-1"><a class="header-anchor" href="#変数の補完" aria-hidden="true">#</a> 変数の補完</h2><p><code>{}</code>構文を使用してステートメント内で変数の補完を行い、変数をステートメントに挿入できます。たとえば、</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WebGAL:はじめまして、{name}さん！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>変数の補完は、キャラクター名にも適用されます。たとえば、</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{name}:私もWebGALが一番好きです！;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ルビ" tabindex="-1"><a class="header-anchor" href="#ルビ" aria-hidden="true">#</a> ルビ</h2><p>会話テキストにルビを振ることは、日本語のゲームではよく見られる演出効果です。日本語では、書き方と読み方が一致しない単語がよくあります。</p><p>ルビの構文は<code>[ルビを振る単語](ルビ)</code>です。</p><p>例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>『[笑顔](えがお)』なんて、『[笑う](わらう)』なんて、[誰](だれ)でも[出来](でき)るもん…！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="テキストボックスを閉じる" tabindex="-1"><a class="header-anchor" href="#テキストボックスを閉じる" aria-hidden="true">#</a> テキストボックスを閉じる</h2><p>特殊な演出効果のために、一時的にテキストボックスを閉じたい場合があります。そのため、次のコマンドを使用してテキストボックスを閉じることができます。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setTextbox:hide; // テキストボックスを閉じる
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>setTextbox</code>コマンドの値が<code>hide</code>の場合、テキストボックスは閉じられ、ユーザーはどの方法でも開くことができません。テキストボックスを再度表示するには、このコマンドをもう一度呼び出して、<code>hide</code>以外の任意の値を入力します。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setTextbox:on; // hide以外の任意の値にすることができます。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ゲームを終了してタイトルに戻る" tabindex="-1"><a class="header-anchor" href="#ゲームを終了してタイトルに戻る" aria-hidden="true">#</a> ゲームを終了してタイトルに戻る</h2><p>ストーリーの最後にゲームを終了してタイトルに戻したい場合は、次を使用してください。</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>end;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>これにより、ゲームはタイトル画面に戻ります。</p><h2 id="映画モード-テスト機能" tabindex="-1"><a class="header-anchor" href="#映画モード-テスト機能" aria-hidden="true">#</a> 映画モード（テスト機能）</h2><p><code>filmMode:enable;</code>を使用して映画モードを有効にします。<br><code>filmMode:none;</code>を使用して映画モードを無効にします。</p>`,46),r=[s];function l(c,t){return a(),d("div",null,r)}const v=e(n,[["render",l],["__file","dialogue.html.vue"]]);export{v as default};
