import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,d as i}from"./app-ed33d3c4.js";const t={},s=i(`<h1 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h1><div class="hint-container warning"><p class="hint-container-title">Note</p><p>Don&#39;t use the variable system until you figure out how to use scene jumping and branch jumping, it will be confusing!</p></div><h2 id="using-variables" tabindex="-1"><a class="header-anchor" href="#using-variables" aria-hidden="true">#</a> Using Variables</h2><p>To set a variable:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setVar:a=1; // You can set a number
setVar:a=true // You can set a boolean
setVar:a=Character Name // You can set a string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To set a random number, use <code>random()</code></p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setVar:a=random();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The random number is between 0 and 1, if you want to specify a range, you need to do some math. For example, if you want a random number between 5 and 10, you need to do:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setVar:a=5+a*5;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also use previously defined variables when setting variables.</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setVar:a=1;
setVar:b=a+1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditional-execution" tabindex="-1"><a class="header-anchor" href="#conditional-execution" aria-hidden="true">#</a> Conditional Execution</h2><p>You can add a <code>-when=(condition)</code> parameter after a statement to conditionally execute the current statement.</p><p>For example:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setVar:a=1;
; // Jump to scene 1 when a is greater than 1
changeScene:1.txt -when=a&gt;1;
; // Jump only when a is 1, note that the equality operator is ==
changeScene:2.txt -when=a==1;
; // If a is less than 1, the above statements won&#39;t execute, so this one will
changeScene:3.txt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>=</code> is the assignment operator, it cannot be used in conditional statements, <code>==</code> is the equality operator.</p></div><p>Any statement can be conditionally executed with the <code>-when</code> parameter. By combining the <code>-when</code> parameter with <code>jumpLabel</code> <code>callScene</code> <code>changeScene</code>, you can achieve conditional flow control.</p><h2 id="getting-user-input" tabindex="-1"><a class="header-anchor" href="#getting-user-input" aria-hidden="true">#</a> Getting User Input</h2><p>Use the <code>getUserInput</code> statement to get user input, for example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>getUserInput:name -title=What&#39;s your name? -buttonText=OK; Store the user input in the variable name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Where <code>title</code> is the prompt text, <code>buttonText</code> is the text on the OK button</p><h2 id="variable-interpolation" tabindex="-1"><a class="header-anchor" href="#variable-interpolation" aria-hidden="true">#</a> Variable Interpolation</h2><p>You can use the <code>{}</code> syntax in statements to interpolate variables, passing a variable into the statement, for example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>setVar:name=WebGAL;
setVar:engine=WebGAL;
{name}:Welcome to {engine}! This is a brand new visual novel engine for web.;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="persistent-variables-global-variables" tabindex="-1"><a class="header-anchor" href="#persistent-variables-global-variables" aria-hidden="true">#</a> Persistent Variables (Global Variables)</h2><p>Normal variables in WebGAL are存档 dependent, that is, any variable only exists in the current game scene, and only存档 can save it and read it back.</p><p>In order to solve the problem that the author may want to set multiple weeks, a persistent (global) variable is provided. Once set, it will take effect in the entire game, unless the user clears all data.</p><p>Adding the <code>-global</code> parameter can set persistent (global) variables</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>setVar:a=1 -global;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This sets a variable that does not change with存档 reading.</p><p>Example of use:</p><div class="language-ws line-numbers-mode" data-ext="ws"><pre class="language-ws"><code>jumpLabel:turn-2 -when=a&gt;0;
setVar:a=1 -global;
First playthrough;
changeScene:First playthrough plot.txt;
label:turn-2;
Second playthrough;
changeScene:Second playthrough plot.txt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),d=[s];function r(l,o){return a(),n("div",null,d)}const v=e(t,[["render",r],["__file","variable.html.vue"]]);export{v as default};
