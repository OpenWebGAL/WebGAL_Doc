import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as d,d as c}from"./app-412530c8.js";const i={},n=c(`<h1 id="webgal-技術紹介" tabindex="-1"><a class="header-anchor" href="#webgal-技術紹介" aria-hidden="true">#</a> WebGAL 技術紹介</h1><h2 id="シーンシステムとプリロード" tabindex="-1"><a class="header-anchor" href="#シーンシステムとプリロード" aria-hidden="true">#</a> シーンシステムとプリロード</h2><h3 id="シーン取得" tabindex="-1"><a class="header-anchor" href="#シーン取得" aria-hidden="true">#</a> シーン取得</h3><p>WebGAL のシーンはファイル単位で、一般的には拡張子が<code>.txt</code>のWebGAL スクリプトファイルです。多くのプログラミング言語にエントリとしての <code>main</code>関数があるように、WebGAL のエントリシーンは<code>start.txt</code>です。WebGAL はまず <code>start.txt</code>を取得し、WebGAL パーサーを呼び出してスクリプトファイルを WebGAL エンジンが実行できるシーンオブジェクトに解析します。どのシーンでも、<code>choose</code>、<code>changeScene</code>、<code>callScene</code>などの方法でシーンを切り替えたり「呼び出したり」することができます。シーンを切り替えると現在のシーンが直接置き換えられ、「呼び出された」シーンはシーン呼び出しスタックに新しいシーンをプッシュして実行を開始し、実行後にそのシーンを呼び出した親シーンに戻ります。</p><h3 id="シーン内のリソースをプリロードする" tabindex="-1"><a class="header-anchor" href="#シーン内のリソースをプリロードする" aria-hidden="true">#</a> シーン内のリソースをプリロードする</h3><p>WebGAL がシーンを解析するのと同時に、シーンに含まれるリソースも解析されます。各シーンファイルについて、WebGAL は画像、オーディオ、ビデオファイルなど、含まれるすべてのリソースを解析します。これらのファイルはシーンの解析が完了した後にプリロードを開始し、ユーザーがゲームプレイ中にリソースのロードを待つ可能性をできるだけ減らします。同時に、ゲームのシーン切り替えをよりスムーズにするために、WebGAL は現在のシーンファイルで参照されているシーンファイルのリソースもロードします。リソースの無駄を避けるため、WebGAL はプリロードするシーンを 1 層だけ拡張します。</p><h2 id="webgal-パーサー" tabindex="-1"><a class="header-anchor" href="#webgal-パーサー" aria-hidden="true">#</a> WebGAL パーサー</h2><h3 id="ステートメント解析-i-シーンを分割する" tabindex="-1"><a class="header-anchor" href="#ステートメント解析-i-シーンを分割する" aria-hidden="true">#</a> ステートメント解析 Ⅰ シーンを分割する</h3><p>WebGAL シーンファイルは主に改行によってスクリプトを区別します。解析の最初に、WebGAL パーサーは改行文字に従ってスクリプトを分割します。セミコロンがある場合は、セミコロンより前の文字を取得します。そのため、WebGAL スクリプトのコメント方法は、コメントをセミコロンの後に書くことです。</p><h3 id="ステートメント解析-ii-スクリプトタイプの解析" tabindex="-1"><a class="header-anchor" href="#ステートメント解析-ii-スクリプトタイプの解析" aria-hidden="true">#</a> ステートメント解析 Ⅱ スクリプトタイプの解析</h3><p>WebGAL のスクリプトは一般に次の形式です。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">command:content -arg1 -arg2 ......;comment</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ここで、command は <code>bgm</code>、<code>changeFigure</code>、<code>choose</code>などのステートメント命令を表し、ステートメントに対応する制御アクションを示します。<code>content</code>はステートメントの主要な内容を表します。たとえば、<code>bgm:Teabreak.mp3</code>は、BGM としてオーディオファイルの一部を再生することを意味します。</p><h3 id="ステートメント解析-iii-会話の特殊処理" tabindex="-1"><a class="header-anchor" href="#ステートメント解析-iii-会話の特殊処理" aria-hidden="true">#</a> ステートメント解析 Ⅲ 会話の特殊処理</h3><p>WebGAL の会話は一般的に次のように記述されます。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">森川由绮:胸につかえていることを、时は解决してくれない。忘却のラベルを贴るだけで -voice_1.ogg;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ビジュアルノベルの場合、会話は一般にスクリプトの主要な構成要素であるため、WebGAL は構文糖を設計しました。スクリプトの command 部分がどの命令にも解析できない場合、WebGAL はそれを会話とみなします。音声はファイル名だけを指定すればパラメータを簡略化することもできます。上記の会話は最終的には <code>say</code> 命令として解析されます。</p><p>したがって、この会話の真の表現は次のようになります。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">say:胸につかえていることを、时は解决してくれない。忘却のラベルを贴るだけで -speaker=森川由绮 vocal=voice_1.ogg;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>それ以外に、会話が 1 人のキャラクターによって発せられる場合、会話の相手が変わるまでは、キャラクター名を省略することもできます。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">森川由绮:胸につかえていることを;</span></span>
<span class="line"><span style="color:#F8F8F2;">时は解决してくれない;</span></span>
<span class="line"><span style="color:#F8F8F2;">忘却のラベルを贴るだけで;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会話の特殊処理により、スクリプト記述の効率が大幅に向上します。</p><h3 id="ステートメント解析-iv-パラメータ解析" tabindex="-1"><a class="header-anchor" href="#ステートメント解析-iv-パラメータ解析" aria-hidden="true">#</a> ステートメント解析 Ⅳ パラメータ解析</h3><p>content の後に <code>-</code> で区切られた追加パラメータがあります。特に注意すべき点は、追加パラメータのハイフン <code>-</code> の前にはスペースが必要であることです。そうしないと、WebGAL はこれがパラメータではなく通常のハイフンであるとみなす可能性があります。</p><p>WebGAL のパラメータは <code>-key=value</code> の形式で表されます。ここで、<code>key</code> の型は <code>string</code> であり、<code>value</code> の型は動的に決定でき、以下の 3 つの可能な型が存在します。<code>string</code>、<code>number</code>、<code>boolean</code>。</p><p>たとえば、<code>-key=s</code> の <code>value</code> は <code>string</code> です。<code>-key=1</code> の <code>value</code> は <code>number</code> であり、<code>-key=true</code> または <code>-key=false</code> の <code>value</code> は <code>boolean</code> です。</p><p>そのうち、<code>key</code> のみを出力して <code>value</code> を省略したパラメータは <code>-key=true</code> として解析されます。これは簡略化された構文糖です。この構文糖は非常に重要です。なぜなら、WebGAL には <code>-next</code> という重要なパラメータがあり、これは現在のステートメントの実行が完了したらすぐに次のステートメントを実行することを意味するからです。省略表示がない場合、毎回 <code>-next=true</code> を記述する必要があります。</p><h3 id="ステートメント解析-v-リソース処理とプリロード" tabindex="-1"><a class="header-anchor" href="#ステートメント解析-v-リソース処理とプリロード" aria-hidden="true">#</a> ステートメント解析 Ⅴ リソース処理とプリロード</h3><p>ステートメント解析を実行すると、ステートメントに必要なリソースを取得できます。たとえば、<code>bgm</code> ステートメントには通常オーディオ リソースが必要であり、<code>playVideo</code> ステートメントには通常ビデオ リソースが必要であり、<code>changeBg</code> ステートメントには通常画像リソースが必要です。WebGAL シーン パーサーは、すべてのシーンでステートメントに必要なリソースを結合して、プリローダーに渡してリソースをプリロードします。同時に、<code>changeScene</code>、<code>choose</code>、<code>callScene</code> など、子シーンを呼び出す必要がある状況が発生すると、子シーンもスキャンされ、解析され、その中のリソースがプリロードされます。</p><h2 id="フロー制御システム" tabindex="-1"><a class="header-anchor" href="#フロー制御システム" aria-hidden="true">#</a> フロー制御システム</h2><h3 id="準備段階-ステップ前操作" tabindex="-1"><a class="header-anchor" href="#準備段階-ステップ前操作" aria-hidden="true">#</a> 準備段階: ステップ前操作</h3><p>フロー制御モジュールは、シーン命令ストレージ モジュール (このモジュールはシーン管理モジュールのサブ モジュールです) から命令を取得し、ステップ前操作と検査を実行します。ステップ前操作には、主に前のフローで終了していないアニメーション、ビデオなどの持続時間のある視覚効果を停止することが含まれます。この操作は、ユーザーが前のフローが持続時間に達して正常に終了する前にマウスをクリックするか、指定のショートカット キーを押すと、ユーザーがこのフローが持続時間に達するまで待機したくない可能性があり、このフローをスキップしたいと考える可能性があるためです。このとき、フロー制御システムは対応するフローを提前終了する関数を呼び出します (各視覚効果には、その効果をアンロードするために使用される関数を提供する必要があります。この関数を呼び出すと、その視覚効果が完全にアンロードされます)。検査には、スキップできない視覚効果があるかどうかと、現在のシーンの最後のステートメントに到達したかどうかを確認することが含まれます。スキップできない視覚効果が存在する場合 (一部の視覚効果スクリプトは特殊なためスキップできず、記事の管理者が設定します)、ユーザーは持続時間に達するまで待ってから次のフローに進むことができます。現在のシーンの最後のステートメントに到達した場合、フロー制御モジュールはシーン呼び出しスタックが空かどうかを確認します。空でない場合は、スタックの一番上の要素 (シーン オブジェクト) を現在のシーン ストレージ モジュールに格納されているシーンに置き換え、「現在のステートメント」のポインターをシーンの最初のステートメントに向け、その後このステートメントを実行します。シーン呼び出しスタックが空の場合、インタラクティブな読書フローは終了したと見なすことができ、このときエンジンはインタラクティブな読書のメイン インターフェイスに戻ります。</p><h3 id="正式段階-i-命令を読み取り、条件判定を実行する" tabindex="-1"><a class="header-anchor" href="#正式段階-i-命令を読み取り、条件判定を実行する" aria-hidden="true">#</a> 正式段階 Ⅰ: 命令を読み取り、条件判定を実行する</h3><p>この段階では、命令が読み取られ、条件判定が行われます。各命令には実行条件を記述するパラメータ (when パラメータ) が含まれる可能性があるため、命令を実行するたびに条件判定を行う必要があります。このとき、フロー制御モジュールは実行条件を記述するパラメータを変数と条件判定モジュールに送り、条件判定を要求します。条件判定モジュールは条件判定式を解析し、エンジンの内部変数と組み合わせて条件判定を行い、最終的に条件判定結果 (真または偽) を返します。フロー制御モジュールはこの結果に基づいて、この命令を実行するかどうかを判断します。実行しない場合、その後のすべての手順をスキップし、準備段階に戻って次の命令を読み取ります。</p><p>条件判定が真の結果を返した場合、フロー制御モジュールは正式段階 II に入ります。</p><h3 id="正式段階-ii-呼び出し、演出制御モジュールを取得して演出コントローラーに送信する" tabindex="-1"><a class="header-anchor" href="#正式段階-ii-呼び出し、演出制御モジュールを取得して演出コントローラーに送信する" aria-hidden="true">#</a> 正式段階 Ⅱ: 呼び出し、演出制御モジュールを取得して演出コントローラーに送信する</h3><p>この段階では、ステートメントの命令を実行するアクションを正式に実行します。各タイプの命令は 1 つのアクションに対応し、このアクションは命令構成と実行モジュールに格納されます。命令構成と実行モジュールには、命令に対応するアクションの構成が格納されています。アクションの構成には、命令が実行する必要がある状態変更操作 (たとえば、「ステージ」の背景を変更したり、特定の位置のキャラクター画像を切り替えたりすること)、アニメーションや特殊効果操作 (たとえば、背景やキャラクター画像にアニメーション効果を追加したり、雨や雪の特殊効果を開始したりすること)、マルチメディア リソースの再生などが含まれます。この構成は命令実行器に送信され、命令実行器によって対応するアクションが具体的に実行されます。各命令実行器は指定のアクションを実行した後、「演出制御モジュール」を返します。ここで「演出」とは、持続時間のある視覚効果のことです。「演出制御モジュール」は、現在の実行中の視覚効果の説明情報と、その視覚効果をアンロードするために使用される関数を記述します。この関数は、視覚効果が持続時間に達した後、またはユーザーが事前に命令を出して中断した後、自動的に呼び出されます。このモジュールは「演出コントローラー」に送信されます。このコントローラーは「演出制御モジュール」を維持する責任を負い、持続時間に達した後に「演出」を自動的にアンロードしたり、ユーザー操作後に準備段階にあるフロー コントローラーが呼び出されて「演出」を提前終了したりするメソッドが含まれます。</p><h3 id="終了段階-連続演出の処理、バックログの更新" tabindex="-1"><a class="header-anchor" href="#終了段階-連続演出の処理、バックログの更新" aria-hidden="true">#</a> 終了段階: 連続演出の処理、バックログの更新</h3><p>命令の実行が終了すると、終了段階に入ります。この段階では、主に読書履歴の記録を維持します。読書の過程でユーザーの読書履歴を記録する必要があるため、ユーザーはいつでも自分の読書履歴を確認し、特定の記録ノードに戻ることができます。従来の紙の本や図文混在の読書方法では、ユーザーは通常、ページを戻したり、マウス ホイールを上にスクロールしたりして、以前に読んだ位置に戻ります。インタラクティブな読書では、読書の流れがユーザーの操作によって変化する可能性があるため、従来の記録方法 (ページ番号やスクロール位置などを記録する) を使用することはできません。そのため、終了段階のたびに、フロー制御モジュールは現在の読書位置 (通常は特定のシーンの第 n 番目の命令) と現在の変数情報とシーン状態情報を記録します。このように、ユーザーが過去に読んだ特定の記録ノードに戻りたい場合、以前に読んだ位置を簡単に読み取って復元できます。</p><h3 id="自動と早送り" tabindex="-1"><a class="header-anchor" href="#自動と早送り" aria-hidden="true">#</a> 自動と早送り</h3><p>自動読書と早送りシステムは、本質的には指定された間隔内でユーザーに代わってステップを実行しようとするものです。自動と早送りの主な違いは、送信される命令の優先度と間隔が異なることです。</p><p>自動モードでは、一定時間ごとに (自動モードで設定された速度によって異なります)、フロー制御システムに「ステップ」を実行するよう命令が出されます。自動モードの優先度は低いため、自動演出をブロックする演出 (ビデオ再生、会話、アニメーションなど、ほとんどの演出は自動モードをブロックする演出です) がある場合は、演出のブロックが解除されるまで実行されません。</p><p>早送りモードでは、ほとんどの演出はスキップされ、選択肢のようにユーザーが何らかの操作を実行する必要がある演出のみがスキップされません。早送りモードのトリガー間隔も明らかに短くなっています。</p><h2 id="演出制御" tabindex="-1"><a class="header-anchor" href="#演出制御" aria-hidden="true">#</a> 演出制御</h2><h3 id="webgal-演出タイプ" tabindex="-1"><a class="header-anchor" href="#webgal-演出タイプ" aria-hidden="true">#</a> WebGAL 演出タイプ</h3><h3 id="演出的自動破棄、終了判定、ブロックロジック" tabindex="-1"><a class="header-anchor" href="#演出的自動破棄、終了判定、ブロックロジック" aria-hidden="true">#</a> 演出的自動破棄、終了判定、ブロックロジック</h3><h2 id="ステージコントローラーとアニメーション制御" tabindex="-1"><a class="header-anchor" href="#ステージコントローラーとアニメーション制御" aria-hidden="true">#</a> ステージコントローラーとアニメーション制御</h2><h3 id="データ駆動型-pixi-ステージコントローラー" tabindex="-1"><a class="header-anchor" href="#データ駆動型-pixi-ステージコントローラー" aria-hidden="true">#</a> データ駆動型 Pixi ステージコントローラー</h3><h3 id="アニメーションと「変換」制御" tabindex="-1"><a class="header-anchor" href="#アニメーションと「変換」制御" aria-hidden="true">#</a> アニメーションと「変換」制御</h3><h3 id="データ駆動型フィルター-マネージャー" tabindex="-1"><a class="header-anchor" href="#データ駆動型フィルター-マネージャー" aria-hidden="true">#</a> データ駆動型フィルター マネージャー</h3><h2 id="セーブ-ロード、巻き戻し、ユーザー-データ" tabindex="-1"><a class="header-anchor" href="#セーブ-ロード、巻き戻し、ユーザー-データ" aria-hidden="true">#</a> セーブ/ロード、巻き戻し、ユーザー データ</h2><h3 id="webgal-ステージ状態表の紹介" tabindex="-1"><a class="header-anchor" href="#webgal-ステージ状態表の紹介" aria-hidden="true">#</a> WebGAL ステージ状態表の紹介</h3><h3 id="演出状態の保存と復元" tabindex="-1"><a class="header-anchor" href="#演出状態の保存と復元" aria-hidden="true">#</a> 演出状態の保存と復元</h3><h3 id="アーカイブとその他のユーザー-データの保存" tabindex="-1"><a class="header-anchor" href="#アーカイブとその他のユーザー-データの保存" aria-hidden="true">#</a> アーカイブとその他のユーザー データの保存</h3><h2 id="鑑賞モジュールとその他の細部" tabindex="-1"><a class="header-anchor" href="#鑑賞モジュールとその他の細部" aria-hidden="true">#</a> 鑑賞モジュールとその他の細部</h2><h3 id="鑑賞モジュール" tabindex="-1"><a class="header-anchor" href="#鑑賞モジュール" aria-hidden="true">#</a> 鑑賞モジュール</h3><h3 id="ブラウザ状態の維持と「ゲームの続行」" tabindex="-1"><a class="header-anchor" href="#ブラウザ状態の維持と「ゲームの続行」" aria-hidden="true">#</a> ブラウザ状態の維持と「ゲームの続行」</h3><h3 id="ショートカット-キーとマウス操作" tabindex="-1"><a class="header-anchor" href="#ショートカット-キーとマウス操作" aria-hidden="true">#</a> ショートカット キーとマウス操作</h3>`,58),r=[n];function s(h,o){return a(),d("div",null,r)}const p=e(i,[["render",s],["__file","index.html.vue"]]);export{p as default};
